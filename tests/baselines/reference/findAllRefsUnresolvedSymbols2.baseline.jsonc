// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}Bar|] } from "does-not-exist";|>
// 
// let a: [|{| defId: 0 |}Bar|];
// let b: [|{| defId: 0 |}Bar|]<string>;
// let c: [|{| defId: 0 |}Bar|]<string, number>;
// let d: [|{| defId: 0 |}Bar|].X;
// let e: [|{| defId: 0 |}Bar|].X<string>;
// let f: [|{| defId: 0 |}Bar|].X.Y;

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { /*FIND ALL REFS*/[|{| contextId: 0, defId: 0 |}Bar|] } from "does-not-exist";|>
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: Bar.X.Y;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "alias",
  "name": "import Bar",
  "displayParts": [
   {
    "text": "import",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Bar",
    "kind": "aliasName"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0, isWriteAccess: true |}Bar|] } from "does-not-exist";|>
// 
// let a: /*FIND ALL REFS*/[|{| defId: 0 |}Bar|];
// let b: [|{| defId: 0 |}Bar|]<string>;
// let c: [|{| defId: 0 |}Bar|]<string, number>;
// let d: [|{| defId: 0 |}Bar|].X;
// let e: [|{| defId: 0 |}Bar|].X<string>;
// let f: [|{| defId: 0 |}Bar|].X.Y;

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0 |}Bar|] } from "does-not-exist";|>
// 
// let a: /*FIND ALL REFS*/Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: Bar.X.Y;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "alias",
  "name": "import Bar",
  "displayParts": [
   {
    "text": "import",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Bar",
    "kind": "aliasName"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0, isWriteAccess: true |}Bar|] } from "does-not-exist";|>
// 
// let a: [|{| defId: 0 |}Bar|];
// let b: /*FIND ALL REFS*/[|{| defId: 0 |}Bar|]<string>;
// let c: [|{| defId: 0 |}Bar|]<string, number>;
// let d: [|{| defId: 0 |}Bar|].X;
// let e: [|{| defId: 0 |}Bar|].X<string>;
// let f: [|{| defId: 0 |}Bar|].X.Y;

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0 |}Bar|] } from "does-not-exist";|>
// 
// let a: Bar;
// let b: /*FIND ALL REFS*/Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: Bar.X.Y;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "alias",
  "name": "import Bar",
  "displayParts": [
   {
    "text": "import",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Bar",
    "kind": "aliasName"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0, isWriteAccess: true |}Bar|] } from "does-not-exist";|>
// 
// let a: [|{| defId: 0 |}Bar|];
// let b: [|{| defId: 0 |}Bar|]<string>;
// let c: /*FIND ALL REFS*/[|{| defId: 0 |}Bar|]<string, number>;
// let d: [|{| defId: 0 |}Bar|].X;
// let e: [|{| defId: 0 |}Bar|].X<string>;
// let f: [|{| defId: 0 |}Bar|].X.Y;

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0 |}Bar|] } from "does-not-exist";|>
// 
// let a: Bar;
// let b: Bar<string>;
// let c: /*FIND ALL REFS*/Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: Bar.X.Y;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "alias",
  "name": "import Bar",
  "displayParts": [
   {
    "text": "import",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Bar",
    "kind": "aliasName"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0, isWriteAccess: true |}Bar|] } from "does-not-exist";|>
// 
// let a: [|{| defId: 0 |}Bar|];
// let b: [|{| defId: 0 |}Bar|]<string>;
// let c: [|{| defId: 0 |}Bar|]<string, number>;
// let d: /*FIND ALL REFS*/[|{| defId: 0 |}Bar|].X;
// let e: [|{| defId: 0 |}Bar|].X<string>;
// let f: [|{| defId: 0 |}Bar|].X.Y;

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0 |}Bar|] } from "does-not-exist";|>
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: /*FIND ALL REFS*/Bar.X;
// let e: Bar.X<string>;
// let f: Bar.X.Y;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "alias",
  "name": "import Bar",
  "displayParts": [
   {
    "text": "import",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Bar",
    "kind": "aliasName"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0, isWriteAccess: true |}Bar|] } from "does-not-exist";|>
// 
// let a: [|{| defId: 0 |}Bar|];
// let b: [|{| defId: 0 |}Bar|]<string>;
// let c: [|{| defId: 0 |}Bar|]<string, number>;
// let d: [|{| defId: 0 |}Bar|].X;
// let e: /*FIND ALL REFS*/[|{| defId: 0 |}Bar|].X<string>;
// let f: [|{| defId: 0 |}Bar|].X.Y;

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0 |}Bar|] } from "does-not-exist";|>
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: /*FIND ALL REFS*/Bar.X<string>;
// let f: Bar.X.Y;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "alias",
  "name": "import Bar",
  "displayParts": [
   {
    "text": "import",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Bar",
    "kind": "aliasName"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0, isWriteAccess: true |}Bar|] } from "does-not-exist";|>
// 
// let a: [|{| defId: 0 |}Bar|];
// let b: [|{| defId: 0 |}Bar|]<string>;
// let c: [|{| defId: 0 |}Bar|]<string, number>;
// let d: [|{| defId: 0 |}Bar|].X;
// let e: [|{| defId: 0 |}Bar|].X<string>;
// let f: /*FIND ALL REFS*/[|{| defId: 0 |}Bar|].X.Y;

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// <|import { [|{| contextId: 0, defId: 0 |}Bar|] } from "does-not-exist";|>
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: /*FIND ALL REFS*/Bar.X.Y;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "alias",
  "name": "import Bar",
  "displayParts": [
   {
    "text": "import",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Bar",
    "kind": "aliasName"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// import { Bar } from "does-not-exist";
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar./*FIND ALL REFS*/[|{| defId: 0 |}X|];
// let e: Bar.[|{| defId: 0 |}X|]<string>;
// let f: Bar.X.Y;

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// import { Bar } from "does-not-exist";
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar./*FIND ALL REFS*/[|{| defId: 0 |}X|];
// let e: Bar.X<string>;
// let f: Bar.X.Y;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type",
  "name": "type Bar.X = /*unresolved*/ any",
  "displayParts": [
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Bar",
    "kind": "aliasName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "X",
    "kind": "aliasName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=",
    "kind": "operator"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "/*unresolved*/",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "any",
    "kind": "keyword"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// import { Bar } from "does-not-exist";
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.[|{| defId: 0 |}X|];
// let e: Bar./*FIND ALL REFS*/[|{| defId: 0 |}X|]<string>;
// let f: Bar.X.Y;

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// import { Bar } from "does-not-exist";
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar./*FIND ALL REFS*/[|{| defId: 0 |}X|]<string>;
// let f: Bar.X.Y;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type",
  "name": "type Bar.X = /*unresolved*/ any",
  "displayParts": [
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Bar",
    "kind": "aliasName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "X",
    "kind": "aliasName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=",
    "kind": "operator"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "/*unresolved*/",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "any",
    "kind": "keyword"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// import { Bar } from "does-not-exist";
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: Bar./*FIND ALL REFS*/[|{| defId: 0 |}X|].Y;

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// import { Bar } from "does-not-exist";
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: Bar./*FIND ALL REFS*/[|{| defId: 0 |}X|].Y;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type",
  "name": "",
  "displayParts": []
 }
]

// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// import { Bar } from "does-not-exist";
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: Bar.X./*FIND ALL REFS*/[|{| defId: 0 |}Y|];

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsUnresolvedSymbols2.ts ===
// import { Bar } from "does-not-exist";
// 
// let a: Bar;
// let b: Bar<string>;
// let c: Bar<string, number>;
// let d: Bar.X;
// let e: Bar.X<string>;
// let f: Bar.X./*FIND ALL REFS*/[|{| defId: 0 |}Y|];

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type",
  "name": "type Bar.X.Y = /*unresolved*/ any",
  "displayParts": [
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Bar",
    "kind": "aliasName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "X",
    "kind": "aliasName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Y",
    "kind": "aliasName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=",
    "kind": "operator"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "/*unresolved*/",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "any",
    "kind": "keyword"
   }
  ]
 }
]