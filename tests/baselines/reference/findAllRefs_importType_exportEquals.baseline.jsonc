// === findAllReferences ===
// === /a.ts ===
// <|type /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}T|] = number;|>
// namespace T {
//     export type U = string;
// }
// <|export = [|{| contextId: 1, defId: 0 |}T|];|>

// === /b.ts ===
// <|const x: import("[|{| contextId: 2, defId: 0 |}./a|]") = 0;|>
// const y: import("./a").U = "";

// === Definitions ===
// === /a.ts ===
// <|type /*FIND ALL REFS*/[|{| contextId: 0, defId: 0 |}T|] = number;|>
// namespace T {
//     export type U = string;
// }
// export = T;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type",
  "name": "type T = number\nnamespace T",
  "displayParts": [
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=",
    "kind": "operator"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "namespace",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   }
  ]
 }
]

// === /a.ts ===
// type T = number;
// <|namespace /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}T|] {
//     export type U = string;
// }|>
// <|export = [|{| contextId: 1, defId: 0 |}T|];|>

// === Definitions ===
// === /a.ts ===
// <|type [|{| contextId: 0, defId: 0 |}T|] = number;|>
// namespace /*FIND ALL REFS*/T {
//     export type U = string;
// }
// export = T;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type",
  "name": "namespace T",
  "displayParts": [
   {
    "text": "namespace",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   }
  ]
 }
]

// === /a.ts ===
// <|type [|{| contextId: 0, defId: 0, isWriteAccess: true |}T|] = number;|>
// <|namespace [|{| contextId: 1, defId: 0, isWriteAccess: true |}T|] {
//     export type U = string;
// }|>
// <|export = /*FIND ALL REFS*/[|{| contextId: 2, defId: 0 |}T|];|>

// === /b.ts ===
// <|const x: import("[|{| contextId: 3, defId: 0 |}./a|]") = 0;|>
// const y: import("./a").U = "";

// === Definitions ===
// === /a.ts ===
// <|type [|{| contextId: 0, defId: 0 |}T|] = number;|>
// namespace T {
//     export type U = string;
// }
// export = /*FIND ALL REFS*/T;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type",
  "name": "type T = number\nnamespace T",
  "displayParts": [
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=",
    "kind": "operator"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "namespace",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   }
  ]
 }
]

// === /b.ts ===
// <|const x: import("/*FIND ALL REFS*/[|{| contextId: 0, defId: 1 |}./a|]") = 0;|>
// <|const y: import("[|{| contextId: 1, defId: 0 |}./a|]").U = "";|>

// === /a.ts ===
// <|type [|{| contextId: 2, defId: 1, isWriteAccess: true |}T|] = number;|>
// <|namespace [|{| contextId: 3, defId: 1, isWriteAccess: true |}T|] {
//     export type U = string;
// }|>
// <|[|{| contextId: 4, defId: 0 |}<|export|] = [|{| contextId: 5, defId: 1 |}T|];|>|>

// === Definitions ===
// === /a.ts ===
// [|{| defId: 0 |}<|type [|{| contextId: 0, defId: 1 |}T|] = number;|>
// namespace T {
//     export type U = string;
// }
// export = T;|]

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "module",
  "name": "module \"/a\"",
  "displayParts": [
   {
    "text": "module",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "\"/a\"",
    "kind": "stringLiteral"
   }
  ]
 },
 {
  "defId": 1,
  "containerKind": "",
  "containerName": "",
  "kind": "type",
  "name": "type T = number\nnamespace T",
  "displayParts": [
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=",
    "kind": "operator"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "namespace",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   }
  ]
 }
]

// === /b.ts ===
// <|const x: import("[|{| contextId: 0, defId: 1 |}./a|]") = 0;|>
// <|const y: import("/*FIND ALL REFS*/[|{| contextId: 1, defId: 0 |}./a|]").U = "";|>

// === /a.ts ===
// <|type [|{| contextId: 2, defId: 1, isWriteAccess: true |}T|] = number;|>
// <|namespace [|{| contextId: 3, defId: 1, isWriteAccess: true |}T|] {
//     export type U = string;
// }|>
// <|[|{| contextId: 4, defId: 0 |}<|export|] = [|{| contextId: 5, defId: 1 |}T|];|>|>

// === Definitions ===
// === /a.ts ===
// [|{| defId: 0 |}<|type [|{| contextId: 0, defId: 1 |}T|] = number;|>
// namespace T {
//     export type U = string;
// }
// export = T;|]

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "module",
  "name": "module \"/a\"",
  "displayParts": [
   {
    "text": "module",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "\"/a\"",
    "kind": "stringLiteral"
   }
  ]
 },
 {
  "defId": 1,
  "containerKind": "",
  "containerName": "",
  "kind": "type",
  "name": "type T = number\nnamespace T",
  "displayParts": [
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=",
    "kind": "operator"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "namespace",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   }
  ]
 }
]

// === /a.ts ===
// <|type [|{| contextId: 0, defId: 0, isWriteAccess: true |}T|] = number;|>
// <|namespace [|{| contextId: 1, defId: 0, isWriteAccess: true |}T|] {
//     export type U = string;
// }|>
// /*FIND ALL REFS*/<|export = [|{| contextId: 2, defId: 0 |}T|];|>

// === /b.ts ===
// <|const x: import("[|{| contextId: 3, defId: 0 |}./a|]") = 0;|>
// const y: import("./a").U = "";

// === Definitions ===
// === /a.ts ===
// <|type [|{| contextId: 0, defId: 0 |}T|] = number;|>
// namespace T {
//     export type U = string;
// }
// /*FIND ALL REFS*/export = T;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type",
  "name": "type T = number\nnamespace T",
  "displayParts": [
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=",
    "kind": "operator"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "namespace",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "moduleName"
   }
  ]
 }
]

// === findRenameLocations ===
// === /a.ts ===
// <|type /*RENAME*/[|{| contextId: 0 |}TRENAME|] = number;|>
// namespace T {
//     export type U = string;
// }
// <|export = [|{| contextId: 1 |}TRENAME|];|>



// === /a.ts ===
// type T = number;
// <|namespace /*RENAME*/[|{| contextId: 0 |}TRENAME|] {
//     export type U = string;
// }|>
// <|export = [|{| contextId: 1 |}TRENAME|];|>



// === /a.ts ===
// <|type [|{| contextId: 0 |}TRENAME|] = number;|>
// <|namespace [|{| contextId: 1 |}TRENAME|] {
//     export type U = string;
// }|>
// <|export = /*RENAME*/[|{| contextId: 2 |}TRENAME|];|>

