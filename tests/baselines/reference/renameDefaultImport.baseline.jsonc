// === findAllReferences ===
// === /tests/cases/fourslash/B.ts ===
// <|export default class /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}B|] {
//     test() {
//     }
// }|>

// === /tests/cases/fourslash/A.ts ===
// <|import [|{| contextId: 1, defId: 1, isWriteAccess: true |}B|] from "./B";|>
// let b = new [|{| defId: 1 |}B|]();
// b.test();

// === Definitions ===
// === /tests/cases/fourslash/B.ts ===
// <|export default class /*FIND ALL REFS*/[|{| contextId: 0, defId: 0 |}B|] {
//     test() {
//     }
// }|>

// === /tests/cases/fourslash/A.ts ===
// <|import [|{| contextId: 1, defId: 1 |}B|] from "./B";|>
// let b = new B();
// b.test();

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "class",
  "name": "class B",
  "displayParts": [
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "B",
    "kind": "className"
   }
  ]
 },
 {
  "defId": 1,
  "containerKind": "",
  "containerName": "",
  "kind": "alias",
  "name": "(alias) class B\nimport B",
  "displayParts": [
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "alias",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "B",
    "kind": "aliasName"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "import",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "B",
    "kind": "aliasName"
   }
  ]
 }
]

// === /tests/cases/fourslash/A.ts ===
// <|import /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}B|] from "./B";|>
// let b = new [|{| defId: 0 |}B|]();
// b.test();

// === /tests/cases/fourslash/B.ts ===
// <|export default class [|{| contextId: 1, defId: 1, isWriteAccess: true |}B|] {
//     test() {
//     }
// }|>

// === Definitions ===
// === /tests/cases/fourslash/A.ts ===
// <|import /*FIND ALL REFS*/[|{| contextId: 0, defId: 0 |}B|] from "./B";|>
// let b = new B();
// b.test();

// === /tests/cases/fourslash/B.ts ===
// <|export default class [|{| contextId: 1, defId: 1 |}B|] {
//     test() {
//     }
// }|>

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "alias",
  "name": "(alias) class B\nimport B",
  "displayParts": [
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "alias",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "B",
    "kind": "aliasName"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "import",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "B",
    "kind": "aliasName"
   }
  ]
 },
 {
  "defId": 1,
  "containerKind": "",
  "containerName": "",
  "kind": "class",
  "name": "class B",
  "displayParts": [
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "B",
    "kind": "className"
   }
  ]
 }
]

// === occurences ===
// === /tests/cases/fourslash/B.ts ===
// <|export default class /*OCCURENCES*/[|{| contextId: 0, isWriteAccess: true |}B|] {
//     test() {
//     }
// }|>



// === findRenameLocations ===
// === /tests/cases/fourslash/B.ts ===
// <|export default class /*RENAME*/[|{| contextId: 0 |}BRENAME|] {
//     test() {
//     }
// }|>

// === /tests/cases/fourslash/A.ts ===
// <|import [|{| contextId: 1 |}BRENAME|] from "./B";|>
// let b = new [|BRENAME|]();
// b.test();



// === /tests/cases/fourslash/A.ts ===
// <|import /*RENAME*/[|{| contextId: 0 |}BRENAME|] from "./B";|>
// let b = new [|BRENAME|]();
// b.test();



// === /tests/cases/fourslash/A.ts ===
// <|import [|{| contextId: 0 |}BRENAME|] from "./B";|>
// let b = new /*RENAME*/[|BRENAME|]();
// b.test();

