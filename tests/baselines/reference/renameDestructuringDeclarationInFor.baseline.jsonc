// === /tests/cases/fourslash/renameDestructuringDeclarationInFor.ts ===
// interface I {
//     /*RENAME*/<|[|{| contextId: 0 |}property1RENAME|]: number;|>
//     property2: string;
// }
// var elems: I[];
// 
// var p2: number, property1: number;
// for (<|let { [|{| contextId: 1 |}property1RENAME|]: p2 } = elems[0]|>; p2 < 100; p2++) {
// }
// for (<|let { [|{| contextId: 2 |}property1RENAME|]: property1/*END SUFFIX*/ } = elems[0]|>; p2 < 100; p2++) {
//     property1 = p2;
// }



// === /tests/cases/fourslash/renameDestructuringDeclarationInFor.ts ===
// interface I {
//     <|[|{| contextId: 0 |}property1RENAME|]: number;|>
//     property2: string;
// }
// var elems: I[];
// 
// var p2: number, property1: number;
// for (<|let { /*RENAME*/[|{| contextId: 1 |}property1RENAME|]: p2 } = elems[0]|>; p2 < 100; p2++) {
// }
// for (<|let { [|{| contextId: 2 |}property1RENAME|]: property1/*END SUFFIX*/ } = elems[0]|>; p2 < 100; p2++) {
//     property1 = p2;
// }



// === /tests/cases/fourslash/renameDestructuringDeclarationInFor.ts ===
// interface I {
//     property1: number;
//     property2: string;
// }
// var elems: I[];
// 
// var p2: number, property1: number;
// for (let { property1: p2 } = elems[0]; p2 < 100; p2++) {
// }
// for (<|let { /*START PREFIX*/property1: /*RENAME*/[|{| contextId: 0 |}property1RENAME|] } = elems[0]|>; p2 < 100; p2++) {
//     [|property1RENAME|] = p2;
// }



// === /tests/cases/fourslash/renameDestructuringDeclarationInFor.ts ===
// interface I {
//     property1: number;
//     property2: string;
// }
// var elems: I[];
// 
// var p2: number, property1: number;
// for (let { property1: p2 } = elems[0]; p2 < 100; p2++) {
// }
// for (<|let { /*START PREFIX*/property1: [|{| contextId: 0 |}property1RENAME|] } = elems[0]|>; p2 < 100; p2++) {
//     /*RENAME*/[|property1RENAME|] = p2;
// }

