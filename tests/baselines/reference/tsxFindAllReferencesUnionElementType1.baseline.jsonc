// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// function SFC1(prop: { x: number }) {
//     return <div>hello </div>;
// };
// function SFC2(prop: { x: boolean }) {
//     return <h1>World </h1>;
// }
// /*FIND ALL REFS*/<|var [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}SFCComp|] = SFC1 || SFC2;|>
// <|<[|{| contextId: 1, defId: 0 |}SFCComp|] x={ "hi" } />|>

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// function SFC1(prop: { x: number }) {
//     return <div>hello </div>;
// };
// function SFC2(prop: { x: boolean }) {
//     return <h1>World </h1>;
// }
// /*FIND ALL REFS*/<|var [|{| contextId: 0, defId: 0 |}SFCComp|] = SFC1 || SFC2;|>
// <SFCComp x={ "hi" } />

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "var",
  "name": "var SFCComp: ((prop: {\n    x: number;\n}) => JSX.Element) | ((prop: {\n    x: boolean;\n}) => JSX.Element)",
  "displayParts": [
   {
    "text": "var",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "SFCComp",
    "kind": "localName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "prop",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "{",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "    ",
    "kind": "space"
   },
   {
    "text": "x",
    "kind": "propertyName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": ";",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "}",
    "kind": "punctuation"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=>",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "|",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "prop",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "{",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "    ",
    "kind": "space"
   },
   {
    "text": "x",
    "kind": "propertyName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "boolean",
    "kind": "keyword"
   },
   {
    "text": ";",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "}",
    "kind": "punctuation"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=>",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// function SFC1(prop: { x: number }) {
//     return <div>hello </div>;
// };
// function SFC2(prop: { x: boolean }) {
//     return <h1>World </h1>;
// }
// <|var /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}SFCComp|] = SFC1 || SFC2;|>
// <|<[|{| contextId: 1, defId: 0 |}SFCComp|] x={ "hi" } />|>

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// function SFC1(prop: { x: number }) {
//     return <div>hello </div>;
// };
// function SFC2(prop: { x: boolean }) {
//     return <h1>World </h1>;
// }
// <|var /*FIND ALL REFS*/[|{| contextId: 0, defId: 0 |}SFCComp|] = SFC1 || SFC2;|>
// <SFCComp x={ "hi" } />

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "var",
  "name": "var SFCComp: ((prop: {\n    x: number;\n}) => JSX.Element) | ((prop: {\n    x: boolean;\n}) => JSX.Element)",
  "displayParts": [
   {
    "text": "var",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "SFCComp",
    "kind": "localName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "prop",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "{",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "    ",
    "kind": "space"
   },
   {
    "text": "x",
    "kind": "propertyName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": ";",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "}",
    "kind": "punctuation"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=>",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "|",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "prop",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "{",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "    ",
    "kind": "space"
   },
   {
    "text": "x",
    "kind": "propertyName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "boolean",
    "kind": "keyword"
   },
   {
    "text": ";",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "}",
    "kind": "punctuation"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=>",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// function SFC1(prop: { x: number }) {
//     return <div>hello </div>;
// };
// function SFC2(prop: { x: boolean }) {
//     return <h1>World </h1>;
// }
// var SFCComp = SFC1 || SFC2;
// /*FIND ALL REFS*/<SFCComp x={ "hi" } />

[]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// function SFC1(prop: { x: number }) {
//     return <div>hello </div>;
// };
// function SFC2(prop: { x: boolean }) {
//     return <h1>World </h1>;
// }
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}SFCComp|] = SFC1 || SFC2;|>
// <|</*FIND ALL REFS*/[|{| contextId: 1, defId: 0 |}SFCComp|] x={ "hi" } />|>

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// function SFC1(prop: { x: number }) {
//     return <div>hello </div>;
// };
// function SFC2(prop: { x: boolean }) {
//     return <h1>World </h1>;
// }
// <|var [|{| contextId: 0, defId: 0 |}SFCComp|] = SFC1 || SFC2;|>
// </*FIND ALL REFS*/SFCComp x={ "hi" } />

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "var",
  "name": "var SFCComp: ((prop: {\n    x: number;\n}) => JSX.Element) | ((prop: {\n    x: boolean;\n}) => JSX.Element)",
  "displayParts": [
   {
    "text": "var",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "SFCComp",
    "kind": "localName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "prop",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "{",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "    ",
    "kind": "space"
   },
   {
    "text": "x",
    "kind": "propertyName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": ";",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "}",
    "kind": "punctuation"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=>",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "|",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "prop",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "{",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "    ",
    "kind": "space"
   },
   {
    "text": "x",
    "kind": "propertyName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "boolean",
    "kind": "keyword"
   },
   {
    "text": ";",
    "kind": "punctuation"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "}",
    "kind": "punctuation"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "=>",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]