// === /a.js ===
// /*FIND ALL REFS*/<|const [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}b|] = require("./b");|>

// === Definitions ===
// === /a.js ===
// /*FIND ALL REFS*/<|const [|{| contextId: 0, defId: 0, kind: "alias", name: "import b", displayParts: [{"text":"import","kind":"keyword"},{"text":" ","kind":"space"},{"text":"b","kind":"aliasName"}] |}b|] = require("./b");|>

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/a.js",
      "kind": "alias",
      "name": "import b",
      "textSpan": {
        "start": 6,
        "length": 1
      },
      "displayParts": [
        {
          "text": "import",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "b",
          "kind": "aliasName"
        }
      ],
      "contextSpan": {
        "start": 0,
        "length": 25
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 6,
          "length": 1
        },
        "fileName": "/a.js",
        "contextSpan": {
          "start": 0,
          "length": 25
        },
        "isWriteAccess": true,
        "isDefinition": true
      }
    ]
  }
]

// === /a.js ===
// <|const b = require("/*FIND ALL REFS*/[|{| contextId: 0, defId: 0 |}./b|]");|>

// === /b.js ===
// <|[|{| contextId: 1, defId: 0 |}module|].exports = 0;|>

// === Definitions ===
// === /b.js ===
// [|{| defId: 0, kind: "module", name: "module \"/b\"", displayParts: [{"text":"module","kind":"keyword"},{"text":" ","kind":"space"},{"text":"\"/b\"","kind":"stringLiteral"}] |}module.exports = 0;|]

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/b.js",
      "kind": "module",
      "name": "module \"/b\"",
      "textSpan": {
        "start": 0,
        "length": 19
      },
      "displayParts": [
        {
          "text": "module",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "\"/b\"",
          "kind": "stringLiteral"
        }
      ]
    },
    "references": [
      {
        "textSpan": {
          "start": 19,
          "length": 3
        },
        "fileName": "/a.js",
        "contextSpan": {
          "start": 0,
          "length": 25
        },
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 0,
          "length": 6
        },
        "fileName": "/b.js",
        "contextSpan": {
          "start": 0,
          "length": 19
        },
        "isWriteAccess": false
      }
    ]
  }
]

// === /a.js ===
// <|const b = require("[|{| contextId: 0, defId: 0 |}./b|]");|>

// === /b.js ===
// /*FIND ALL REFS*/<|[|{| contextId: 1, defId: 0 |}module|].exports = 0;|>

// === Definitions ===
// === /b.js ===
// /*FIND ALL REFS*/[|{| defId: 0, kind: "module", name: "module \"/b\"", displayParts: [{"text":"module","kind":"keyword"},{"text":" ","kind":"space"},{"text":"\"/b\"","kind":"stringLiteral"}] |}module.exports = 0;|]

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/b.js",
      "kind": "module",
      "name": "module \"/b\"",
      "textSpan": {
        "start": 0,
        "length": 19
      },
      "displayParts": [
        {
          "text": "module",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "\"/b\"",
          "kind": "stringLiteral"
        }
      ]
    },
    "references": [
      {
        "textSpan": {
          "start": 19,
          "length": 3
        },
        "fileName": "/a.js",
        "contextSpan": {
          "start": 0,
          "length": 25
        },
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 0,
          "length": 6
        },
        "fileName": "/b.js",
        "contextSpan": {
          "start": 0,
          "length": 19
        },
        "isWriteAccess": false
      }
    ]
  }
]