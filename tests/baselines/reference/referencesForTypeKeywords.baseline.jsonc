// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// <|interface [|{| contextId: 0, defId: 0, isWriteAccess: true |}I|] {}|>
// function f<T /*FIND ALL REFS*/extends [|{| defId: 0 |}I|]>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];

// === Definitions ===
// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// <|interface [|{| contextId: 0, defId: 0 |}I|] {}|>
// function f<T /*FIND ALL REFS*/extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "interface",
  "name": "interface I",
  "displayParts": [
   {
    "text": "interface",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "I",
    "kind": "interfaceName"
   }
  ]
 }
]

// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// interface I {}
// function f<T extends I>() {}
// type A1<T, [|{| defId: 0, isWriteAccess: true |}U|]> = T /*FIND ALL REFS*/extends [|{| defId: 0 |}U|] ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];

// === Definitions ===
// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// interface I {}
// function f<T extends I>() {}
// type A1<T, [|{| defId: 0 |}U|]> = T /*FIND ALL REFS*/extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type parameter",
  "name": "(type parameter) U in type A1<T, U>",
  "displayParts": [
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "type parameter",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "U",
    "kind": "typeParameterName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "in",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "A1",
    "kind": "aliasName"
   },
   {
    "text": "<",
    "kind": "punctuation"
   },
   {
    "text": "T",
    "kind": "typeParameterName"
   },
   {
    "text": ",",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "U",
    "kind": "typeParameterName"
   },
   {
    "text": ">",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends /*FIND ALL REFS*/infer [|{| defId: 0, isWriteAccess: true, isDefinition: true |}U|] ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];

// === Definitions ===
// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends /*FIND ALL REFS*/infer [|{| defId: 0 |}U|] ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type parameter",
  "name": "(type parameter) U",
  "displayParts": [
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "type parameter",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "U",
    "kind": "typeParameterName"
   }
  ]
 }
]

// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [<|[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}P|] /*FIND ALL REFS*/in keyof T|>]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];

// === Definitions ===
// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [<|[|{| contextId: 0, defId: 0 |}P|] /*FIND ALL REFS*/in keyof T|>]: 1 };
// type A4<T> = keyof T;
// type A5<T> = readonly T[];

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type parameter",
  "name": "(type parameter) P",
  "displayParts": [
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "type parameter",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "P",
    "kind": "typeParameterName"
   }
  ]
 }
]

// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<[|{| defId: 0, isWriteAccess: true |}T|]> = /*FIND ALL REFS*/keyof [|{| defId: 0 |}T|];
// type A5<T> = readonly T[];

// === Definitions ===
// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<[|{| defId: 0 |}T|]> = /*FIND ALL REFS*/keyof T;
// type A5<T> = readonly T[];

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type parameter",
  "name": "(type parameter) T in type A4<T>",
  "displayParts": [
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "type parameter",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "typeParameterName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "in",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "A4",
    "kind": "aliasName"
   },
   {
    "text": "<",
    "kind": "punctuation"
   },
   {
    "text": "T",
    "kind": "typeParameterName"
   },
   {
    "text": ">",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<[|{| defId: 0, isWriteAccess: true |}T|]> = /*FIND ALL REFS*/readonly [|{| defId: 0 |}T|][];

// === Definitions ===
// === /tests/cases/fourslash/referencesForTypeKeywords.ts ===
// interface I {}
// function f<T extends I>() {}
// type A1<T, U> = T extends U ? 1 : 0;
// type A2<T> = T extends infer U ? 1 : 0;
// type A3<T> = { [P in keyof T]: 1 };
// type A4<T> = keyof T;
// type A5<[|{| defId: 0 |}T|]> = /*FIND ALL REFS*/readonly T[];

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "type parameter",
  "name": "(type parameter) T in type A5<T>",
  "displayParts": [
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "type parameter",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "typeParameterName"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "in",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "type",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "A5",
    "kind": "aliasName"
   },
   {
    "text": "<",
    "kind": "punctuation"
   },
   {
    "text": "T",
    "kind": "typeParameterName"
   },
   {
    "text": ">",
    "kind": "punctuation"
   }
  ]
 }
]