// === /tests/cases/fourslash/isDefinitionOverloads.ts ===
// <|function /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isDefinition: true |}f|](x: number): void;|>
// <|function [|{| contextId: 1, defId: 0, isDefinition: true |}f|](x: string): void;|>
// <|function [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}f|](x: number | string) { }|>
// 
// [|{| defId: 0 |}f|](1);
// [|{| defId: 0 |}f|]("a");

// === Definitions ===
// === /tests/cases/fourslash/isDefinitionOverloads.ts ===
// <|function /*FIND ALL REFS*/[|{| contextId: 0, defId: 0 |}f|](x: number): void;|>
// function f(x: string): void;
// function f(x: number | string) { }
// 
// f(1);
// f("a");

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function f(x: number): void (+1 overload)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "f",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "x",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "void",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "1",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overload",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/isDefinitionOverloads.ts ===
// <|function [|{| contextId: 0, defId: 0, isDefinition: true |}f|](x: number): void;|>
// <|function /*FIND ALL REFS*/[|{| contextId: 1, defId: 0, isDefinition: true |}f|](x: string): void;|>
// <|function [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}f|](x: number | string) { }|>
// 
// [|{| defId: 0 |}f|](1);
// [|{| defId: 0 |}f|]("a");

// === Definitions ===
// === /tests/cases/fourslash/isDefinitionOverloads.ts ===
// <|function [|{| contextId: 0, defId: 0 |}f|](x: number): void;|>
// function /*FIND ALL REFS*/f(x: string): void;
// function f(x: number | string) { }
// 
// f(1);
// f("a");

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function f(x: number): void (+1 overload)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "f",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "x",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "void",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "1",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overload",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/isDefinitionOverloads.ts ===
// <|function [|{| contextId: 0, defId: 0, isDefinition: true |}f|](x: number): void;|>
// <|function [|{| contextId: 1, defId: 0, isDefinition: true |}f|](x: string): void;|>
// <|function /*FIND ALL REFS*/[|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}f|](x: number | string) { }|>
// 
// [|{| defId: 0 |}f|](1);
// [|{| defId: 0 |}f|]("a");

// === Definitions ===
// === /tests/cases/fourslash/isDefinitionOverloads.ts ===
// <|function [|{| contextId: 0, defId: 0 |}f|](x: number): void;|>
// function f(x: string): void;
// function /*FIND ALL REFS*/f(x: number | string) { }
// 
// f(1);
// f("a");

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function f(x: number): void (+1 overload)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "f",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "x",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "void",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "1",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overload",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]