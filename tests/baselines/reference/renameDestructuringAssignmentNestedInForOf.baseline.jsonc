// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInForOf.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         /*RENAME*/<|[|{| contextId: 0 |}primaryRENAME|]: string;|>
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// let primary: string, secondary: string, primaryA: string, secondaryA: string;
// for (<|{ skills: { [|{| contextId: 1 |}primaryRENAME|]: primaryA, secondary: secondaryA } } of multiRobots|>) {
//     primaryA;
// }
// for (<|{ skills: { [|{| contextId: 2 |}primaryRENAME|]: primary/*END SUFFIX*/, secondary } } of multiRobots|>) {
//     primary;
// }



// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInForOf.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         <|[|{| contextId: 0 |}primaryRENAME|]: string;|>
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// let primary: string, secondary: string, primaryA: string, secondaryA: string;
// for (<|{ skills: { /*RENAME*/[|{| contextId: 1 |}primaryRENAME|]: primaryA, secondary: secondaryA } } of multiRobots|>) {
//     primaryA;
// }
// for (<|{ skills: { [|{| contextId: 2 |}primaryRENAME|]: primary/*END SUFFIX*/, secondary } } of multiRobots|>) {
//     primary;
// }



// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInForOf.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// let /*RENAME*/<|[|{| contextId: 0 |}primaryRENAME|]: string|>, secondary: string, primaryA: string, secondaryA: string;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     primaryA;
// }
// for (<|{ skills: { /*START PREFIX*/primary: [|{| contextId: 1 |}primaryRENAME|], secondary } } of multiRobots|>) {
//     [|primaryRENAME|];
// }



// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInForOf.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// let <|[|{| contextId: 0 |}primaryRENAME|]: string|>, secondary: string, primaryA: string, secondaryA: string;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     primaryA;
// }
// for (<|{ skills: { /*START PREFIX*/primary: /*RENAME*/[|{| contextId: 1 |}primaryRENAME|], secondary } } of multiRobots|>) {
//     [|primaryRENAME|];
// }



// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInForOf.ts ===
// interface MultiRobot {
//     name: string;
//     skills: {
//         primary: string;
//         secondary: string;
//     };
// }
// let multiRobots: MultiRobot[];
// let <|[|{| contextId: 0 |}primaryRENAME|]: string|>, secondary: string, primaryA: string, secondaryA: string;
// for ({ skills: { primary: primaryA, secondary: secondaryA } } of multiRobots) {
//     primaryA;
// }
// for (<|{ skills: { /*START PREFIX*/primary: [|{| contextId: 1 |}primaryRENAME|], secondary } } of multiRobots|>) {
//     /*RENAME*/[|primaryRENAME|];
// }

