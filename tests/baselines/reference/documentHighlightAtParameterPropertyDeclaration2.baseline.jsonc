// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(<|private {/*HIGHLIGHTS*/[|{| contextId: 0, kind: "writtenReference" |}privateParam|]}: number|>,
//         public {publicParam}: string,
//         protected {protectedParam}: boolean) {
// 
//         let localPrivate = [|{| kind: "reference" |}privateParam|];
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }



// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private {privateParam}: number,
//         <|public {/*HIGHLIGHTS*/[|{| contextId: 0, kind: "writtenReference" |}publicParam|]}: string|>,
//         protected {protectedParam}: boolean) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = [|{| kind: "reference" |}publicParam|];
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }



// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private {privateParam}: number,
//         public {publicParam}: string,
//         <|protected {/*HIGHLIGHTS*/[|{| contextId: 0, kind: "writtenReference" |}protectedParam|]}: boolean|>) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = [|{| kind: "reference" |}protectedParam|];
//         this.protectedParam = false;
//     }
// }



// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(<|private {[|{| contextId: 0, kind: "writtenReference" |}privateParam|]}: number|>,
//         public {publicParam}: string,
//         protected {protectedParam}: boolean) {
// 
//         let localPrivate = /*HIGHLIGHTS*/[|{| kind: "reference" |}privateParam|];
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }



// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private {privateParam}: number,
//         <|public {[|{| contextId: 0, kind: "writtenReference" |}publicParam|]}: string|>,
//         protected {protectedParam}: boolean) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = /*HIGHLIGHTS*/[|{| kind: "reference" |}publicParam|];
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }



// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private {privateParam}: number,
//         public {publicParam}: string,
//         <|protected {[|{| contextId: 0, kind: "writtenReference" |}protectedParam|]}: boolean|>) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = /*HIGHLIGHTS*/[|{| kind: "reference" |}protectedParam|];
//         this.protectedParam = false;
//     }
// }

