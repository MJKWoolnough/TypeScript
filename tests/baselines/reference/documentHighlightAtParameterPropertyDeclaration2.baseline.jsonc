// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(<|private {/*HIGHLIGHTS*/[|{| contextId: 0, kind: "writtenReference" |}privateParam|]}: number|>,
//         public {publicParam}: string,
//         protected {protectedParam}: boolean) {
// 
//         let localPrivate = [|{| kind: "reference" |}privateParam|];
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }

[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 114,
          "length": 12
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 105,
          "length": 30
        }
      },
      {
        "textSpan": {
          "start": 250,
          "length": 12
        },
        "kind": "reference"
      }
    ]
  }
]

// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private {privateParam}: number,
//         <|public {/*HIGHLIGHTS*/[|{| contextId: 0, kind: "writtenReference" |}publicParam|]}: string|>,
//         protected {protectedParam}: boolean) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = [|{| kind: "reference" |}publicParam|];
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }

[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 153,
          "length": 11
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 145,
          "length": 28
        }
      },
      {
        "textSpan": {
          "start": 324,
          "length": 11
        },
        "kind": "reference"
      }
    ]
  }
]

// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private {privateParam}: number,
//         public {publicParam}: string,
//         <|protected {/*HIGHLIGHTS*/[|{| contextId: 0, kind: "writtenReference" |}protectedParam|]}: boolean|>) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = [|{| kind: "reference" |}protectedParam|];
//         this.protectedParam = false;
//     }
// }

[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 194,
          "length": 14
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 183,
          "length": 35
        }
      },
      {
        "textSpan": {
          "start": 406,
          "length": 14
        },
        "kind": "reference"
      }
    ]
  }
]

// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(<|private {[|{| contextId: 0, kind: "writtenReference" |}privateParam|]}: number|>,
//         public {publicParam}: string,
//         protected {protectedParam}: boolean) {
// 
//         let localPrivate = /*HIGHLIGHTS*/[|{| kind: "reference" |}privateParam|];
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }

[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 114,
          "length": 12
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 105,
          "length": 30
        }
      },
      {
        "textSpan": {
          "start": 250,
          "length": 12
        },
        "kind": "reference"
      }
    ]
  }
]

// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private {privateParam}: number,
//         <|public {[|{| contextId: 0, kind: "writtenReference" |}publicParam|]}: string|>,
//         protected {protectedParam}: boolean) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = /*HIGHLIGHTS*/[|{| kind: "reference" |}publicParam|];
//         this.publicParam += " Hello!";
// 
//         let localProtected = protectedParam;
//         this.protectedParam = false;
//     }
// }

[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 153,
          "length": 11
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 145,
          "length": 28
        }
      },
      {
        "textSpan": {
          "start": 324,
          "length": 11
        },
        "kind": "reference"
      }
    ]
  }
]

// === /tests/cases/fourslash/file1.ts ===
// class Foo {
//     // This is not valid syntax: parameter property can't be binding pattern
//     constructor(private {privateParam}: number,
//         public {publicParam}: string,
//         <|protected {[|{| contextId: 0, kind: "writtenReference" |}protectedParam|]}: boolean|>) {
// 
//         let localPrivate = privateParam;
//         this.privateParam += 10;
// 
//         let localPublic = publicParam;
//         this.publicParam += " Hello!";
// 
//         let localProtected = /*HIGHLIGHTS*/[|{| kind: "reference" |}protectedParam|];
//         this.protectedParam = false;
//     }
// }

[
  {
    "fileName": "/tests/cases/fourslash/file1.ts",
    "highlightSpans": [
      {
        "textSpan": {
          "start": 194,
          "length": 14
        },
        "kind": "writtenReference",
        "contextSpan": {
          "start": 183,
          "length": 35
        }
      },
      {
        "textSpan": {
          "start": 406,
          "length": 14
        },
        "kind": "reference"
      }
    ]
  }
]