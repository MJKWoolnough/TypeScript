// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// /*FIND ALL REFS*/<|interface [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     p: number;
// }|>
// <|interface [|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     m: number;
// }|>
// <|class [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }|>
// let i: [|{| defId: 0 |}Numbers|] = new [|{| defId: 0 |}Numbers|]();
// let x = i.f(i.p + i.m);

// === Definitions ===
// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// /*FIND ALL REFS*/<|interface [|{| contextId: 0, defId: 0 |}Numbers|] {
//     p: number;
// }|>
// interface Numbers {
//     m: number;
// }
// class Numbers {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }
// let i: Numbers = new Numbers();
// let x = i.f(i.p + i.m);

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "class",
  "name": "class Numbers\ninterface Numbers",
  "displayParts": [
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "interface",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   }
  ]
 }
]

// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     p: number;
// }|>
// <|interface [|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     m: number;
// }|>
// <|class [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }|>
// let i: [|{| defId: 0 |}Numbers|] = new [|{| defId: 0 |}Numbers|]();
// let x = i.f(i.p + i.m);

// === Definitions ===
// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface /*FIND ALL REFS*/[|{| contextId: 0, defId: 0 |}Numbers|] {
//     p: number;
// }|>
// interface Numbers {
//     m: number;
// }
// class Numbers {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }
// let i: Numbers = new Numbers();
// let x = i.f(i.p + i.m);

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "class",
  "name": "class Numbers\ninterface Numbers",
  "displayParts": [
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "interface",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   }
  ]
 }
]

// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     p: number;
// }|>
// /*FIND ALL REFS*/<|interface [|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     m: number;
// }|>
// <|class [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }|>
// let i: [|{| defId: 0 |}Numbers|] = new [|{| defId: 0 |}Numbers|]();
// let x = i.f(i.p + i.m);

// === Definitions ===
// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0 |}Numbers|] {
//     p: number;
// }|>
// /*FIND ALL REFS*/interface Numbers {
//     m: number;
// }
// class Numbers {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }
// let i: Numbers = new Numbers();
// let x = i.f(i.p + i.m);

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "class",
  "name": "class Numbers\ninterface Numbers",
  "displayParts": [
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "interface",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   }
  ]
 }
]

// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     p: number;
// }|>
// <|interface /*FIND ALL REFS*/[|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     m: number;
// }|>
// <|class [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }|>
// let i: [|{| defId: 0 |}Numbers|] = new [|{| defId: 0 |}Numbers|]();
// let x = i.f(i.p + i.m);

// === Definitions ===
// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0 |}Numbers|] {
//     p: number;
// }|>
// interface /*FIND ALL REFS*/Numbers {
//     m: number;
// }
// class Numbers {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }
// let i: Numbers = new Numbers();
// let x = i.f(i.p + i.m);

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "class",
  "name": "class Numbers\ninterface Numbers",
  "displayParts": [
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "interface",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   }
  ]
 }
]

// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     p: number;
// }|>
// <|interface [|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     m: number;
// }|>
// /*FIND ALL REFS*/<|class [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }|>
// let i: [|{| defId: 0 |}Numbers|] = new [|{| defId: 0 |}Numbers|]();
// let x = i.f(i.p + i.m);

// === Definitions ===
// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0 |}Numbers|] {
//     p: number;
// }|>
// interface Numbers {
//     m: number;
// }
// /*FIND ALL REFS*/class Numbers {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }
// let i: Numbers = new Numbers();
// let x = i.f(i.p + i.m);

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "class",
  "name": "class Numbers\ninterface Numbers",
  "displayParts": [
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "interface",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   }
  ]
 }
]

// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     p: number;
// }|>
// <|interface [|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     m: number;
// }|>
// <|class /*FIND ALL REFS*/[|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}Numbers|] {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }|>
// let i: [|{| defId: 0 |}Numbers|] = new [|{| defId: 0 |}Numbers|]();
// let x = i.f(i.p + i.m);

// === Definitions ===
// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0 |}Numbers|] {
//     p: number;
// }|>
// interface Numbers {
//     m: number;
// }
// class /*FIND ALL REFS*/Numbers {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }
// let i: Numbers = new Numbers();
// let x = i.f(i.p + i.m);

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "class",
  "name": "class Numbers\ninterface Numbers",
  "displayParts": [
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "interface",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   }
  ]
 }
]

// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0, isWriteAccess: true |}Numbers|] {
//     p: number;
// }|>
// <|interface [|{| contextId: 1, defId: 0, isWriteAccess: true |}Numbers|] {
//     m: number;
// }|>
// <|class [|{| contextId: 2, defId: 0, isWriteAccess: true |}Numbers|] {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }|>
// let i: /*FIND ALL REFS*/[|{| defId: 0 |}Numbers|] = new [|{| defId: 0 |}Numbers|]();
// let x = i.f(i.p + i.m);

// === Definitions ===
// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0 |}Numbers|] {
//     p: number;
// }|>
// interface Numbers {
//     m: number;
// }
// class Numbers {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }
// let i: /*FIND ALL REFS*/Numbers = new Numbers();
// let x = i.f(i.p + i.m);

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "class",
  "name": "class Numbers\ninterface Numbers",
  "displayParts": [
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "interface",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   }
  ]
 }
]

// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0, isWriteAccess: true |}Numbers|] {
//     p: number;
// }|>
// <|interface [|{| contextId: 1, defId: 0, isWriteAccess: true |}Numbers|] {
//     m: number;
// }|>
// <|class [|{| contextId: 2, defId: 0, isWriteAccess: true |}Numbers|] {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }|>
// let i: [|{| defId: 0 |}Numbers|] = new /*FIND ALL REFS*/[|{| defId: 0 |}Numbers|]();
// let x = i.f(i.p + i.m);

// === Definitions ===
// === /tests/cases/fourslash/getOccurrencesIsDefinitionOfInterfaceClassMerge.ts ===
// <|interface [|{| contextId: 0, defId: 0 |}Numbers|] {
//     p: number;
// }|>
// interface Numbers {
//     m: number;
// }
// class Numbers {
//     f(n: number) {
//         return this.p + this.m + n;
//     }
// }
// let i: Numbers = new /*FIND ALL REFS*/Numbers();
// let x = i.f(i.p + i.m);

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "class",
  "name": "class Numbers\ninterface Numbers",
  "displayParts": [
   {
    "text": "class",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   },
   {
    "text": "\n",
    "kind": "lineBreak"
   },
   {
    "text": "interface",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "Numbers",
    "kind": "className"
   }
  ]
 }
]