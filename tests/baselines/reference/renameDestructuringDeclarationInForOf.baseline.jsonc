// === /tests/cases/fourslash/renameDestructuringDeclarationInForOf.ts ===
// interface I {
//     /*RENAME*/<|[|{| contextId: 0 |}property1RENAME|]: number;|>
//     property2: string;
// }
// var elems: I[];
// 
// for (<|let { [|{| contextId: 1 |}property1RENAME|]: property1/*END SUFFIX*/ } of elems|>) {
//     property1++;
// }
// for (<|let { [|{| contextId: 2 |}property1RENAME|]: p2 } of elems|>) {
// }



// === /tests/cases/fourslash/renameDestructuringDeclarationInForOf.ts ===
// interface I {
//     <|[|{| contextId: 0 |}property1RENAME|]: number;|>
//     property2: string;
// }
// var elems: I[];
// 
// for (<|let { [|{| contextId: 1 |}property1RENAME|]: property1/*END SUFFIX*/ } of elems|>) {
//     property1++;
// }
// for (<|let { /*RENAME*/[|{| contextId: 2 |}property1RENAME|]: p2 } of elems|>) {
// }



// === /tests/cases/fourslash/renameDestructuringDeclarationInForOf.ts ===
// interface I {
//     property1: number;
//     property2: string;
// }
// var elems: I[];
// 
// for (<|let { /*START PREFIX*/property1: /*RENAME*/[|{| contextId: 0 |}property1RENAME|] } of elems|>) {
//     [|property1RENAME|]++;
// }
// for (let { property1: p2 } of elems) {
// }



// === /tests/cases/fourslash/renameDestructuringDeclarationInForOf.ts ===
// interface I {
//     property1: number;
//     property2: string;
// }
// var elems: I[];
// 
// for (<|let { /*START PREFIX*/property1: [|{| contextId: 0 |}property1RENAME|] } of elems|>) {
//     /*RENAME*/[|property1RENAME|]++;
// }
// for (let { property1: p2 } of elems) {
// }

