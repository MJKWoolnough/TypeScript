// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// /*FIND ALL REFS*/<|var [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// /*FIND ALL REFS*/<|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     /*FIND ALL REFS*/<|static [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     /*FIND ALL REFS*/<|static [|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsSVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsSVar","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsSVar: number",
      "textSpan": {
        "start": 195,
        "length": 7
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsSVar",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 188,
        "length": 19
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 195,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 188,
          "length": 19
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 402,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 686,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 889,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1075,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1353,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsSVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsSVar","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsSVar: number",
      "textSpan": {
        "start": 195,
        "length": 7
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsSVar",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 188,
        "length": 19
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 195,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 188,
          "length": 19
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 402,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 686,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 889,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1075,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1353,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     /*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}clsVar|] = 1;|>
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.[|{| defId: 0, isWriteAccess: true |}clsVar|]++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     /*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsVar","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsVar|] = 1;|>
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsVar: number",
      "textSpan": {
        "start": 265,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsVar",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 265,
        "length": 11
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 265,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 265,
          "length": 11
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 377,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (/*FIND ALL REFS*/<|public [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}clsParam|]: number|>) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.[|{| defId: 0, isWriteAccess: true |}clsParam|]++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (/*FIND ALL REFS*/<|public [|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsParam: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsParam","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsParam|]: number|>) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsParam: number",
      "textSpan": {
        "start": 302,
        "length": 8
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsParam",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 295,
        "length": 23
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 302,
          "length": 8
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 295,
          "length": 23
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 470,
          "length": 8
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (<|public /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}clsParam|]: number|>) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.[|{| defId: 0, isWriteAccess: true |}clsParam|]++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (<|public /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsParam: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsParam","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsParam|]: number|>) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsParam: number",
      "textSpan": {
        "start": 302,
        "length": 8
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsParam",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 295,
        "length": 23
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 302,
          "length": 8
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 295,
          "length": 23
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 470,
          "length": 8
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         /*FIND ALL REFS*/globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     <|[|{| contextId: 0, defId: 0, isWriteAccess: true |}clsVar|] = 1;|>
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this./*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}clsVar|]++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     <|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsVar","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsVar|] = 1;|>
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this./*FIND ALL REFS*/clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsVar: number",
      "textSpan": {
        "start": 265,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsVar",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 265,
        "length": 11
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 265,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 265,
          "length": 11
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 377,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static [|{| contextId: 0, defId: 0, isWriteAccess: true |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls./*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static [|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsSVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsSVar","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls./*FIND ALL REFS*/clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsSVar: number",
      "textSpan": {
        "start": 195,
        "length": 7
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsSVar",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 188,
        "length": 19
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 195,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 188,
          "length": 19
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 402,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 686,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 889,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1075,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1353,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (<|public [|{| contextId: 0, defId: 0, isWriteAccess: true |}clsParam|]: number|>) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this./*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}clsParam|]++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (<|public [|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsParam: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsParam","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsParam|]: number|>) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this./*FIND ALL REFS*/clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsParam: number",
      "textSpan": {
        "start": 302,
        "length": 8
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsParam",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 295,
        "length": 23
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 302,
          "length": 8
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 295,
          "length": 23
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 470,
          "length": 8
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// /*FIND ALL REFS*/<|function [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = [|{| defId: 0 |}foo|];
//     }
// 
//     function testFn(){
//         static boo = [|{| defId: 0 |}foo|];
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = [|{| defId: 0 |}foo|];
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// [|{| defId: 0 |}foo|](globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// [|{| defId: 0, isWriteAccess: true |}foo|] = [|{| defId: 0 |}foo|] + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// /*FIND ALL REFS*/<|function [|{| contextId: 0, defId: 0, kind: "function", name: "function foo(x: number): number", displayParts: [{"text":"function","kind":"keyword"},{"text":" ","kind":"space"},{"text":"foo","kind":"functionName"},{"text":"(","kind":"punctuation"},{"text":"x","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "function",
      "name": "function foo(x: number): number",
      "textSpan": {
        "start": 565,
        "length": 3
      },
      "displayParts": [
        {
          "text": "function",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "foo",
          "kind": "functionName"
        },
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "x",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 556,
        "length": 224
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 565,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 556,
          "length": 224
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 956,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1012,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1150,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1316,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1490,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1496,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = [|{| defId: 0 |}foo|];
//     }
// 
//     function testFn(){
//         static boo = [|{| defId: 0 |}foo|];
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = [|{| defId: 0 |}foo|];
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// [|{| defId: 0 |}foo|](globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// [|{| defId: 0, isWriteAccess: true |}foo|] = [|{| defId: 0 |}foo|] + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, kind: "function", name: "function foo(x: number): number", displayParts: [{"text":"function","kind":"keyword"},{"text":" ","kind":"space"},{"text":"foo","kind":"functionName"},{"text":"(","kind":"punctuation"},{"text":"x","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "function",
      "name": "function foo(x: number): number",
      "textSpan": {
        "start": 565,
        "length": 3
      },
      "displayParts": [
        {
          "text": "function",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "foo",
          "kind": "functionName"
        },
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "x",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 556,
        "length": 224
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 565,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 556,
          "length": 224
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 956,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1012,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1150,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1316,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1490,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1496,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(/*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}x|]: number|>) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return [|{| defId: 0, isWriteAccess: true |}x|]++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(/*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0, kind: "parameter", name: "(parameter) x: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"parameter","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"x","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}x|]: number|>) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "parameter",
      "name": "(parameter) x: number",
      "textSpan": {
        "start": 569,
        "length": 1
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "parameter",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "x",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 569,
        "length": 9
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 569,
          "length": 1
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 569,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 774,
          "length": 1
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     /*FIND ALL REFS*/<|var [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}fnVar|] = 1;|>
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     [|{| defId: 0, isWriteAccess: true |}fnVar|]++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     /*FIND ALL REFS*/<|var [|{| contextId: 0, defId: 0, kind: "local var", name: "(local var) fnVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"local var","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fnVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}fnVar|] = 1;|>
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "local var",
      "name": "(local var) fnVar: number",
      "textSpan": {
        "start": 646,
        "length": 5
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "local var",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fnVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 642,
        "length": 14
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 646,
          "length": 5
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 642,
          "length": 14
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 740,
          "length": 5
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     <|var /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}fnVar|] = 1;|>
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     [|{| defId: 0, isWriteAccess: true |}fnVar|]++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     <|var /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, kind: "local var", name: "(local var) fnVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"local var","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fnVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}fnVar|] = 1;|>
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "local var",
      "name": "(local var) fnVar: number",
      "textSpan": {
        "start": 646,
        "length": 5
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "local var",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fnVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 642,
        "length": 14
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 646,
          "length": 5
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 642,
          "length": 14
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 740,
          "length": 5
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static [|{| contextId: 0, defId: 0, isWriteAccess: true |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls./*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static [|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsSVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsSVar","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls./*FIND ALL REFS*/clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsSVar: number",
      "textSpan": {
        "start": 195,
        "length": 7
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsSVar",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 188,
        "length": 19
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 195,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 188,
          "length": 19
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 402,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 686,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 889,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1075,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1353,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     /*FIND ALL REFS*/globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}fnVar|] = 1;|>
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}fnVar|]++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     <|var [|{| contextId: 0, defId: 0, kind: "local var", name: "(local var) fnVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"local var","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fnVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}fnVar|] = 1;|>
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     /*FIND ALL REFS*/fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "local var",
      "name": "(local var) fnVar: number",
      "textSpan": {
        "start": 646,
        "length": 5
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "local var",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fnVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 642,
        "length": 14
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 646,
          "length": 5
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 642,
          "length": 14
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 740,
          "length": 5
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(<|[|{| contextId: 0, defId: 0, isWriteAccess: true |}x|]: number|>) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}x|]++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(<|[|{| contextId: 0, defId: 0, kind: "parameter", name: "(parameter) x: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"parameter","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"x","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}x|]: number|>) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return /*FIND ALL REFS*/x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "parameter",
      "name": "(parameter) x: number",
      "textSpan": {
        "start": 569,
        "length": 1
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "parameter",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "x",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 569,
        "length": 9
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 569,
          "length": 1
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 569,
          "length": 9
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 774,
          "length": 1
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     /*FIND ALL REFS*/globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static [|{| contextId: 0, defId: 0, isWriteAccess: true |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls./*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static [|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsSVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsSVar","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls./*FIND ALL REFS*/clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsSVar: number",
      "textSpan": {
        "start": 195,
        "length": 7
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsSVar",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 188,
        "length": 19
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 195,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 188,
          "length": 19
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 402,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 686,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 889,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1075,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1353,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, isWriteAccess: true |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = /*FIND ALL REFS*/[|{| defId: 0 |}foo|];
//     }
// 
//     function testFn(){
//         static boo = [|{| defId: 0 |}foo|];
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = [|{| defId: 0 |}foo|];
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// [|{| defId: 0 |}foo|](globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// [|{| defId: 0, isWriteAccess: true |}foo|] = [|{| defId: 0 |}foo|] + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, kind: "function", name: "function foo(x: number): number", displayParts: [{"text":"function","kind":"keyword"},{"text":" ","kind":"space"},{"text":"foo","kind":"functionName"},{"text":"(","kind":"punctuation"},{"text":"x","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = /*FIND ALL REFS*/foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "function",
      "name": "function foo(x: number): number",
      "textSpan": {
        "start": 565,
        "length": 3
      },
      "displayParts": [
        {
          "text": "function",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "foo",
          "kind": "functionName"
        },
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "x",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 556,
        "length": 224
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 565,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 556,
          "length": 224
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 956,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1012,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1150,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1316,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1490,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1496,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, isWriteAccess: true |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = [|{| defId: 0 |}foo|];
//     }
// 
//     function testFn(){
//         static boo = /*FIND ALL REFS*/[|{| defId: 0 |}foo|];
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = [|{| defId: 0 |}foo|];
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// [|{| defId: 0 |}foo|](globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// [|{| defId: 0, isWriteAccess: true |}foo|] = [|{| defId: 0 |}foo|] + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, kind: "function", name: "function foo(x: number): number", displayParts: [{"text":"function","kind":"keyword"},{"text":" ","kind":"space"},{"text":"foo","kind":"functionName"},{"text":"(","kind":"punctuation"},{"text":"x","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = /*FIND ALL REFS*/foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "function",
      "name": "function foo(x: number): number",
      "textSpan": {
        "start": 565,
        "length": 3
      },
      "displayParts": [
        {
          "text": "function",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "foo",
          "kind": "functionName"
        },
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "x",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 556,
        "length": 224
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 565,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 556,
          "length": 224
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 956,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1012,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1150,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1316,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1490,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1496,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         /*FIND ALL REFS*/globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static [|{| contextId: 0, defId: 0, isWriteAccess: true |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls./*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static [|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsSVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsSVar","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls./*FIND ALL REFS*/clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsSVar: number",
      "textSpan": {
        "start": 195,
        "length": 7
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsSVar",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 188,
        "length": 19
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 195,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 188,
          "length": 19
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 402,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 686,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 889,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1075,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1353,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, isWriteAccess: true |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = [|{| defId: 0 |}foo|];
//     }
// 
//     function testFn(){
//         static boo = [|{| defId: 0 |}foo|];
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = /*FIND ALL REFS*/[|{| defId: 0 |}foo|];
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// [|{| defId: 0 |}foo|](globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// [|{| defId: 0, isWriteAccess: true |}foo|] = [|{| defId: 0 |}foo|] + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, kind: "function", name: "function foo(x: number): number", displayParts: [{"text":"function","kind":"keyword"},{"text":" ","kind":"space"},{"text":"foo","kind":"functionName"},{"text":"(","kind":"punctuation"},{"text":"x","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = /*FIND ALL REFS*/foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "function",
      "name": "function foo(x: number): number",
      "textSpan": {
        "start": 565,
        "length": 3
      },
      "displayParts": [
        {
          "text": "function",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "foo",
          "kind": "functionName"
        },
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "x",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 556,
        "length": 224
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 565,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 556,
          "length": 224
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 956,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1012,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1150,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1316,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1490,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1496,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(/*FIND ALL REFS*/[|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(/*FIND ALL REFS*/globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, isWriteAccess: true |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = [|{| defId: 0 |}foo|];
//     }
// 
//     function testFn(){
//         static boo = [|{| defId: 0 |}foo|];
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = [|{| defId: 0 |}foo|];
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// /*FIND ALL REFS*/[|{| defId: 0 |}foo|](globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// [|{| defId: 0, isWriteAccess: true |}foo|] = [|{| defId: 0 |}foo|] + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, kind: "function", name: "function foo(x: number): number", displayParts: [{"text":"function","kind":"keyword"},{"text":" ","kind":"space"},{"text":"foo","kind":"functionName"},{"text":"(","kind":"punctuation"},{"text":"x","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// /*FIND ALL REFS*/foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "function",
      "name": "function foo(x: number): number",
      "textSpan": {
        "start": 565,
        "length": 3
      },
      "displayParts": [
        {
          "text": "function",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "foo",
          "kind": "functionName"
        },
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "x",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 556,
        "length": 224
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 565,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 556,
          "length": 224
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 956,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1012,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1150,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1316,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1490,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1496,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo(/*FIND ALL REFS*/[|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(/*FIND ALL REFS*/globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static [|{| contextId: 0, defId: 0, isWriteAccess: true |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls./*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}clsSVar|]++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     <|static [|{| contextId: 0, defId: 0, kind: "property", name: "(property) fooCls.clsSVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"fooCls","kind":"className"},{"text":".","kind":"punctuation"},{"text":"clsSVar","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}clsSVar|] = 1;|>
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls./*FIND ALL REFS*/clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "property",
      "name": "(property) fooCls.clsSVar: number",
      "textSpan": {
        "start": 195,
        "length": 7
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "fooCls",
          "kind": "className"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "clsSVar",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 188,
        "length": 19
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 195,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 188,
          "length": 19
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 402,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 686,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 889,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1075,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1353,
          "length": 7
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// /*FIND ALL REFS*/globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = /*FIND ALL REFS*/[|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = /*FIND ALL REFS*/globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + /*FIND ALL REFS*/[|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + /*FIND ALL REFS*/globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls([|{| defId: 0 |}globalVar|]);
// // References to a function argument.
// foo([|{| defId: 0 |}globalVar|]);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// [|{| defId: 0, isWriteAccess: true |}globalVar|] = [|{| defId: 0 |}globalVar|] + [|{| defId: 0 |}globalVar|];
// 
// //ETC - Other cases
// /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}globalVar|] = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// <|var [|{| contextId: 0, defId: 0, kind: "var", name: "var globalVar: number", displayParts: [{"text":"var","kind":"keyword"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"localName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number = 2;|>
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// /*FIND ALL REFS*/globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "var",
      "name": "var globalVar: number",
      "textSpan": {
        "start": 87,
        "length": 9
      },
      "displayParts": [
        {
          "text": "var",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "localName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 83,
        "length": 26
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 87,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 83,
          "length": 26
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 351,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 701,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 865,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1047,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1266,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1320,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1382,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1394,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1406,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1438,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, isWriteAccess: true |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = [|{| defId: 0 |}foo|];
//     }
// 
//     function testFn(){
//         static boo = [|{| defId: 0 |}foo|];
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = [|{| defId: 0 |}foo|];
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// [|{| defId: 0 |}foo|](globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}foo|] = [|{| defId: 0 |}foo|] + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, kind: "function", name: "function foo(x: number): number", displayParts: [{"text":"function","kind":"keyword"},{"text":" ","kind":"space"},{"text":"foo","kind":"functionName"},{"text":"(","kind":"punctuation"},{"text":"x","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// /*FIND ALL REFS*/foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "function",
      "name": "function foo(x: number): number",
      "textSpan": {
        "start": 565,
        "length": 3
      },
      "displayParts": [
        {
          "text": "function",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "foo",
          "kind": "functionName"
        },
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "x",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 556,
        "length": 224
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 565,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 556,
          "length": 224
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 956,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1012,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1150,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1316,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1490,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1496,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, isWriteAccess: true |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = [|{| defId: 0 |}foo|];
//     }
// 
//     function testFn(){
//         static boo = [|{| defId: 0 |}foo|];
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = [|{| defId: 0 |}foo|];
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// [|{| defId: 0 |}foo|](globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// [|{| defId: 0, isWriteAccess: true |}foo|] = /*FIND ALL REFS*/[|{| defId: 0 |}foo|] + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// <|function [|{| contextId: 0, defId: 0, kind: "function", name: "function foo(x: number): number", displayParts: [{"text":"function","kind":"keyword"},{"text":" ","kind":"space"},{"text":"foo","kind":"functionName"},{"text":"(","kind":"punctuation"},{"text":"x","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}foo|](x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }|>
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = /*FIND ALL REFS*/foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "function",
      "name": "function foo(x: number): number",
      "textSpan": {
        "start": 565,
        "length": 3
      },
      "displayParts": [
        {
          "text": "function",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "foo",
          "kind": "functionName"
        },
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "x",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 556,
        "length": 224
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 565,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 556,
          "length": 224
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 956,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1012,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1150,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1316,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      },
      {
        "textSpan": {
          "start": 1490,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1496,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(/*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}globalVar|]: number|>) {
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     return [|{| defId: 0 |}globalVar|];
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(/*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0, kind: "parameter", name: "(parameter) globalVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"parameter","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number|>) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "parameter",
      "name": "(parameter) globalVar: number",
      "textSpan": {
        "start": 1557,
        "length": 9
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "parameter",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 1557,
        "length": 17
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 1557,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 1557,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 1599,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 1623,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(<|[|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number|>) {
//     //Increments
//     /*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     return [|{| defId: 0 |}globalVar|];
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(<|[|{| contextId: 0, defId: 0, kind: "parameter", name: "(parameter) globalVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"parameter","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number|>) {
//     //Increments
//     /*FIND ALL REFS*/globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "parameter",
      "name": "(parameter) globalVar: number",
      "textSpan": {
        "start": 1557,
        "length": 9
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "parameter",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 1557,
        "length": 17
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 1557,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 1557,
          "length": 17
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1599,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1623,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(<|[|{| contextId: 0, defId: 0, isWriteAccess: true |}globalVar|]: number|>) {
//     //Increments
//     [|{| defId: 0, isWriteAccess: true |}globalVar|]++;
//     return /*FIND ALL REFS*/[|{| defId: 0 |}globalVar|];
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(<|[|{| contextId: 0, defId: 0, kind: "parameter", name: "(parameter) globalVar: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"parameter","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"globalVar","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}globalVar|]: number|>) {
//     //Increments
//     globalVar++;
//     return /*FIND ALL REFS*/globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "parameter",
      "name": "(parameter) globalVar: number",
      "textSpan": {
        "start": 1557,
        "length": 9
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "parameter",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "globalVar",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 1557,
        "length": 17
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 1557,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "contextSpan": {
          "start": 1557,
          "length": 17
        },
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1599,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 1623,
          "length": 9
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(/*FIND ALL REFS*/[|{| defId: 0, isWriteAccess: true, isDefinition: true |}str|]) {
// 
// 
// 
//    // Reference misses function parameter.
//    return [|{| defId: 0 |}str|] + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(/*FIND ALL REFS*/[|{| defId: 0, kind: "parameter", name: "(parameter) str: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"parameter","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"str","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}str|]) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "parameter",
      "name": "(parameter) str: string",
      "textSpan": {
        "start": 2052,
        "length": 3
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "parameter",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "str",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ]
    },
    "references": [
      {
        "textSpan": {
          "start": 2052,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 2115,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function([|{| defId: 0, isWriteAccess: true |}str|]) {
// 
// 
// 
//    // Reference misses function parameter.
//    return /*FIND ALL REFS*/[|{| defId: 0 |}str|] + " ";
// 
// });

// === Definitions ===
// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function([|{| defId: 0, kind: "parameter", name: "(parameter) str: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"parameter","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"str","kind":"parameterName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}str|]) {
// 
// 
// 
//    // Reference misses function parameter.
//    return /*FIND ALL REFS*/str + " ";
// 
// });

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
      "kind": "parameter",
      "name": "(parameter) str: string",
      "textSpan": {
        "start": 2052,
        "length": 3
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "parameter",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "str",
          "kind": "parameterName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ]
    },
    "references": [
      {
        "textSpan": {
          "start": 2052,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": true
      },
      {
        "textSpan": {
          "start": 2115,
          "length": 3
        },
        "fileName": "/tests/cases/fourslash/localGetReferences_1.ts",
        "isWriteAccess": false
      }
    ]
  }
]

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: g/*FIND ALL REFS*/lobalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

undefined

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// /*FIND ALL REFS*/err = err++;
// 
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

undefined

// === /tests/cases/fourslash/localGetReferences_1.ts ===
// // Comment Refence Test: globalVar
// // References to a variable declared in global.
// var globalVar: number = 2;
// 
// class fooCls {
//     // References to static variable declared in a class.
//     static clsSVar = 1;
//     // References to a variable declared in a class.
//     clsVar = 1;
// 
//     constructor (public clsParam: number) {
//         //Increments
//         globalVar++;
//         this.clsVar++;
//         fooCls.clsSVar++;
//         // References to a class parameter.
//         this.clsParam++;
//         modTest.modVar++;
//     }
// }
// 
// // References to a function parameter.
// function foo(x: number) {
//     // References to a variable declared in a function.
//     var fnVar = 1;
// 
//     //Increments
//     fooCls.clsSVar++;
//     globalVar++;
//     modTest.modVar++;
//     fnVar++;
// 
//     //Return
//     return x++;
// }
// 
// module modTest {
//     //Declare
//     export var modVar:number;
// 
//     //Increments
//     globalVar++;
//     fooCls.clsSVar++;
//     modVar++;
// 
//     class testCls {
//         static boo = foo;
//     }
// 
//     function testFn(){
//         static boo = foo;
// 
//         //Increments
//         globalVar++;
//         fooCls.clsSVar++;
//         modVar++;
//     }
// 
//     module testMod {
//         var boo = foo;
//     }
// }
// 
// //Type test
// var clsTest: fooCls;
// 
// //Arguments
// // References to a class argument.
// clsTest = new fooCls(globalVar);
// // References to a function argument.
// foo(globalVar);
// 
// //Increments
// fooCls.clsSVar++;
// modTest.modVar++;
// globalVar = globalVar + globalVar;
// 
// //ETC - Other cases
// globalVar = 3;
// // References to illegal assignment.
// foo = foo + 1;
// err = err++;
// /*FIND ALL REFS*/
// //Shadowed fn Parameter
// function shdw(globalVar: number) {
//     //Increments
//     globalVar++;
//     return globalVar;
// }
// 
// //Remotes
// //Type test
// var remoteclsTest: remotefooCls;
// 
// //Arguments
// remoteclsTest = new remotefooCls(remoteglobalVar);
// remotefoo(remoteglobalVar);
// 
// //Increments
// remotefooCls.remoteclsSVar++;
// remotemodTest.remotemodVar++;
// remoteglobalVar = remoteglobalVar + remoteglobalVar;
// 
// //ETC - Other cases
// remoteglobalVar = 3;
// 
// //Find References misses method param
// var
// 
// 
// 
//  array = ["f", "o", "o"];
// 
// array.forEach(
// 
// 
// function(str) {
// 
// 
// 
//    // Reference misses function parameter.
//    return str + " ";
// 
// });

undefined