// === /tests/cases/fourslash/findAllRefsMappedType.ts ===
// interface T { /*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0, isDefinition: true |}a|]: number;|> }
// type U = { readonly [K in keyof T]?: string };
// declare const t: T;
// t.[|{| defId: 0 |}a|];
// declare const u: U;
// u.[|{| defId: 0 |}a|];

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsMappedType.ts ===
// interface T { /*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0 |}a|]: number;|> }
// type U = { readonly [K in keyof T]?: string };
// declare const t: T;
// t.a;
// declare const u: U;
// u.a;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "property",
  "name": "(property) T.a: number",
  "displayParts": [
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "property",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "interfaceName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "a",
    "kind": "propertyName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsMappedType.ts ===
// interface T { <|[|{| contextId: 0, defId: 0 |}a|]: number;|> }
// type U = { readonly [K in keyof T]?: string };
// declare const t: T;
// t./*FIND ALL REFS*/[|{| defId: 0 |}a|];
// declare const u: U;
// u.[|{| defId: 0 |}a|];

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsMappedType.ts ===
// interface T { <|[|{| contextId: 0, defId: 0 |}a|]: number;|> }
// type U = { readonly [K in keyof T]?: string };
// declare const t: T;
// t./*FIND ALL REFS*/a;
// declare const u: U;
// u.a;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "property",
  "name": "(property) T.a: number",
  "displayParts": [
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "property",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "interfaceName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "a",
    "kind": "propertyName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   }
  ]
 }
]

// === /tests/cases/fourslash/findAllRefsMappedType.ts ===
// interface T { <|[|{| contextId: 0, defId: 0 |}a|]: number;|> }
// type U = { readonly [K in keyof T]?: string };
// declare const t: T;
// t.[|{| defId: 0 |}a|];
// declare const u: U;
// u./*FIND ALL REFS*/[|{| defId: 0 |}a|];

// === Definitions ===
// === /tests/cases/fourslash/findAllRefsMappedType.ts ===
// interface T { <|[|{| contextId: 0, defId: 0 |}a|]: number;|> }
// type U = { readonly [K in keyof T]?: string };
// declare const t: T;
// t.a;
// declare const u: U;
// u./*FIND ALL REFS*/a;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "property",
  "name": "(property) T.a: number",
  "displayParts": [
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "property",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "T",
    "kind": "interfaceName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "a",
    "kind": "propertyName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "number",
    "kind": "keyword"
   }
  ]
 }
]