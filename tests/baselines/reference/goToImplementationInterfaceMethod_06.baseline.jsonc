// === /tests/cases/fourslash/goToImplementationInterfaceMethod_06.ts ===
// interface SuperFoo {
//     hello (): void;
// }
// 
// interface Foo extends SuperFoo {
//     someOtherFunction(): void;
// }
// 
// class Bar implements Foo {
//      <|[|{| contextId: 0, displayParts: [{"text":"(","kind":"punctuation"},{"text":"method","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"Bar","kind":"className"},{"text":".","kind":"punctuation"},{"text":"hello","kind":"methodName"},{"text":"(","kind":"punctuation"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"void","kind":"keyword"}], kind: "method" |}hello|]() {}|>
//      someOtherFunction() {}
// }
// 
// function createFoo(): Foo {
//     return {
//         <|[|{| contextId: 1, displayParts: [{"text":"(","kind":"punctuation"},{"text":"method","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"hello","kind":"methodName"},{"text":"(","kind":"punctuation"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"void","kind":"keyword"}], kind: "method" |}hello|]() {}|>,
//         someOtherFunction() {}
//     };
// }
// 
// var y: Foo = {
//     <|[|{| contextId: 2, displayParts: [{"text":"(","kind":"punctuation"},{"text":"method","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"hello","kind":"methodName"},{"text":"(","kind":"punctuation"},{"text":")","kind":"punctuation"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"void","kind":"keyword"}], kind: "method" |}hello|]() {}|>,
//     someOtherFunction() {}
// };
// 
// class FooLike implements SuperFoo {
//      hello() {}
//      someOtherFunction() {}
// }
// 
// class NotRelatedToFoo {
//      hello() {}                // This case is equivalent to the last case, but is not returned because it does not share a common ancestor with Foo
//      someOtherFunction() {}
// }
// 
// class NotFoo implements SuperFoo {
//      hello() {}                // We only want implementations of Foo, even though the function is declared in SuperFoo
// }
// 
// function (x: Foo) {
//     x.he/*GOTO IMPL*/llo()
// }

