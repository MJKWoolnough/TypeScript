// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     /*RENAME*/<|[|{| contextId: 0 |}onClickRENAME|](event?: React.MouseEvent<HTMLButtonElement>): void;|>
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton <|[|{| contextId: 1 |}onClickRENAME|]={()=>{}}|> />;
// let opt = <MainButton <|[|{| contextId: 2 |}onClickRENAME|]={()=>{}}|> ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     <|[|{| contextId: 0 |}onClickRENAME|](event?: React.MouseEvent<HTMLButtonElement>): void;|>
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton /*RENAME*/<|[|{| contextId: 1 |}onClickRENAME|]={()=>{}}|> />;
// let opt = <MainButton <|[|{| contextId: 2 |}onClickRENAME|]={()=>{}}|> ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     <|[|{| contextId: 0 |}onClickRENAME|](event?: React.MouseEvent<HTMLButtonElement>): void;|>
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton <|[|{| contextId: 1 |}onClickRENAME|]={()=>{}}|> />;
// let opt = <MainButton /*RENAME*/<|[|{| contextId: 2 |}onClickRENAME|]={()=>{}}|> ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     /*RENAME*/<|[|{| contextId: 0 |}goToRENAME|]: string;|>
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton <|[|{| contextId: 1 |}goToRENAME|]="goTo"|> />;
// let opt = <MainButton wrong />;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     <|[|{| contextId: 0 |}goToRENAME|]: string;|>
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton /*RENAME*/<|[|{| contextId: 1 |}goToRENAME|]="goTo"|> />;
// let opt = <MainButton wrong />;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function /*RENAME*/[|{| contextId: 0 |}MainButtonRENAME|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1 |}MainButtonRENAME|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2 |}MainButtonRENAME|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3 |}MainButtonRENAME|] />|>;
// let opt = <|<[|{| contextId: 4 |}MainButtonRENAME|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5 |}MainButtonRENAME|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6 |}MainButtonRENAME|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7 |}MainButtonRENAME|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8 |}MainButtonRENAME|] wrong />|>;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0 |}MainButtonRENAME|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function /*RENAME*/[|{| contextId: 1 |}MainButtonRENAME|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2 |}MainButtonRENAME|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3 |}MainButtonRENAME|] />|>;
// let opt = <|<[|{| contextId: 4 |}MainButtonRENAME|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5 |}MainButtonRENAME|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6 |}MainButtonRENAME|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7 |}MainButtonRENAME|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8 |}MainButtonRENAME|] wrong />|>;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0 |}MainButtonRENAME|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1 |}MainButtonRENAME|](linkProps: LinkProps): JSX.Element;|>
// <|declare function /*RENAME*/[|{| contextId: 2 |}MainButtonRENAME|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3 |}MainButtonRENAME|] />|>;
// let opt = <|<[|{| contextId: 4 |}MainButtonRENAME|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5 |}MainButtonRENAME|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6 |}MainButtonRENAME|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7 |}MainButtonRENAME|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8 |}MainButtonRENAME|] wrong />|>;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0 |}MainButtonRENAME|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1 |}MainButtonRENAME|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2 |}MainButtonRENAME|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|</*RENAME*/[|{| contextId: 3 |}MainButtonRENAME|] />|>;
// let opt = <|<[|{| contextId: 4 |}MainButtonRENAME|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5 |}MainButtonRENAME|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6 |}MainButtonRENAME|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7 |}MainButtonRENAME|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8 |}MainButtonRENAME|] wrong />|>;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0 |}MainButtonRENAME|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1 |}MainButtonRENAME|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2 |}MainButtonRENAME|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3 |}MainButtonRENAME|] />|>;
// let opt = <|</*RENAME*/[|{| contextId: 4 |}MainButtonRENAME|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5 |}MainButtonRENAME|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6 |}MainButtonRENAME|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7 |}MainButtonRENAME|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8 |}MainButtonRENAME|] wrong />|>;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0 |}MainButtonRENAME|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1 |}MainButtonRENAME|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2 |}MainButtonRENAME|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3 |}MainButtonRENAME|] />|>;
// let opt = <|<[|{| contextId: 4 |}MainButtonRENAME|] children="chidlren" />|>;
// let opt = <|</*RENAME*/[|{| contextId: 5 |}MainButtonRENAME|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6 |}MainButtonRENAME|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7 |}MainButtonRENAME|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8 |}MainButtonRENAME|] wrong />|>;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0 |}MainButtonRENAME|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1 |}MainButtonRENAME|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2 |}MainButtonRENAME|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3 |}MainButtonRENAME|] />|>;
// let opt = <|<[|{| contextId: 4 |}MainButtonRENAME|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5 |}MainButtonRENAME|] onClick={()=>{}} />|>;
// let opt = <|</*RENAME*/[|{| contextId: 6 |}MainButtonRENAME|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7 |}MainButtonRENAME|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8 |}MainButtonRENAME|] wrong />|>;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0 |}MainButtonRENAME|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1 |}MainButtonRENAME|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2 |}MainButtonRENAME|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3 |}MainButtonRENAME|] />|>;
// let opt = <|<[|{| contextId: 4 |}MainButtonRENAME|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5 |}MainButtonRENAME|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6 |}MainButtonRENAME|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|</*RENAME*/[|{| contextId: 7 |}MainButtonRENAME|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8 |}MainButtonRENAME|] wrong />|>;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0 |}MainButtonRENAME|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1 |}MainButtonRENAME|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2 |}MainButtonRENAME|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3 |}MainButtonRENAME|] />|>;
// let opt = <|<[|{| contextId: 4 |}MainButtonRENAME|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5 |}MainButtonRENAME|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6 |}MainButtonRENAME|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7 |}MainButtonRENAME|] goTo="goTo" />|>;
// let opt = <|</*RENAME*/[|{| contextId: 8 |}MainButtonRENAME|] wrong />|>;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} /*RENAME*/[|ignore-propRENAME|] />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;



// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton /*RENAME*/[|wrongRENAME|] />;

