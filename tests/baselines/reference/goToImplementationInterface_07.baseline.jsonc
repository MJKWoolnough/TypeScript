// === /tests/cases/fourslash/goToImplementationInterface_07.ts ===
// interface Fo/*GOTO IMPL*/o {
//     hello (): void;
// }
// 
// interface Bar {
//     hello (): void;
// }
// 
// let x1: Foo            = [|{| kind: "interface", displayParts: [{"text":"(","kind":"punctuation"},{"text":"object literal","kind":"text"},{"text":")","kind":"punctuation"}] |}{ hello ()          { /**typeReference*/ } }|];
// let x2: () => Foo      = [|{| displayParts: [] |}(() => { hello ()   { /**functionType*/} })|];
// let x3: Foo | Bar      = [|{| kind: "interface", displayParts: [{"text":"(","kind":"punctuation"},{"text":"object literal","kind":"text"},{"text":")","kind":"punctuation"}] |}{ hello ()          { /**unionType*/} }|];
// let x4: Foo & (Foo & Bar)      = [|{| kind: "interface", displayParts: [{"text":"(","kind":"punctuation"},{"text":"object literal","kind":"text"},{"text":")","kind":"punctuation"}] |}{ hello ()          { /**intersectionType*/} }|];
// let x5: [Foo]          = [|{| displayParts: [] |}[{ hello ()         { /**tupleType*/} }]|];
// let x6: (Foo)          = [|{| kind: "interface", displayParts: [{"text":"(","kind":"punctuation"},{"text":"object literal","kind":"text"},{"text":")","kind":"punctuation"}] |}{ hello ()          { /**parenthesizedType*/} }|];
// let x7: (new() => Foo) = [|{| kind: "local class", displayParts: [{"text":"(","kind":"punctuation"},{"text":"anonymous local class","kind":"text"},{"text":")","kind":"punctuation"}] |}class { hello ()    { /**constructorType*/} }|];
// let x8: Foo[]          = [|{| displayParts: [] |}[{ hello ()         { /**arrayType*/} }]|];
// let x9: { y: Foo }     = [|{| kind: "interface", displayParts: [{"text":"(","kind":"punctuation"},{"text":"object literal","kind":"text"},{"text":")","kind":"punctuation"}] |}{ y: { hello ()     { /**typeLiteral*/} } }|];
// let x10 = [|{| kind: "local class", displayParts: [{"text":"(","kind":"punctuation"},{"text":"anonymous local class","kind":"text"},{"text":")","kind":"punctuation"}] |}class implements Foo { hello() {} }|]
// let x11 = <|class [|{| contextId: 0, displayParts: [{"text":"(","kind":"punctuation"},{"text":"local class","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"C","kind":"className"}], kind: "local class" |}C|] implements Foo { hello() {} }|>
// 
// // Should not do anything for type predicates
// function isFoo(a: any): a is Foo {
//     return true;
// }

