// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// /*FIND ALL REFS*/<|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// /*FIND ALL REFS*/<|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function /*FIND ALL REFS*/[|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function /*FIND ALL REFS*/[|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// /*FIND ALL REFS*/<|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// /*FIND ALL REFS*/declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function /*FIND ALL REFS*/[|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function /*FIND ALL REFS*/MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// /*FIND ALL REFS*/<|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// /*FIND ALL REFS*/declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function /*FIND ALL REFS*/[|{| contextId: 2, defId: 0, isWriteAccess: true, isDefinition: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function /*FIND ALL REFS*/MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = /*FIND ALL REFS*/<MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

[]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|</*FIND ALL REFS*/[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = </*FIND ALL REFS*/MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = /*FIND ALL REFS*/<MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

[]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|</*FIND ALL REFS*/[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = </*FIND ALL REFS*/MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = /*FIND ALL REFS*/<MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

[]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|</*FIND ALL REFS*/[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = </*FIND ALL REFS*/MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = /*FIND ALL REFS*/<MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

[]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|</*FIND ALL REFS*/[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = </*FIND ALL REFS*/MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = /*FIND ALL REFS*/<MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

[]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|</*FIND ALL REFS*/[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|<[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = </*FIND ALL REFS*/MainButton goTo="goTo" />;
// let opt = <MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// declare function MainButton(buttonProps: ButtonProps): JSX.Element;
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = /*FIND ALL REFS*/<MainButton wrong />;

[]

// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0, isWriteAccess: true |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// <|declare function [|{| contextId: 1, defId: 0, isWriteAccess: true |}MainButton|](linkProps: LinkProps): JSX.Element;|>
// <|declare function [|{| contextId: 2, defId: 0, isWriteAccess: true |}MainButton|](props: ButtonProps | LinkProps): JSX.Element;|>
// let opt = <|<[|{| contextId: 3, defId: 0 |}MainButton|] />|>;
// let opt = <|<[|{| contextId: 4, defId: 0 |}MainButton|] children="chidlren" />|>;
// let opt = <|<[|{| contextId: 5, defId: 0 |}MainButton|] onClick={()=>{}} />|>;
// let opt = <|<[|{| contextId: 6, defId: 0 |}MainButton|] onClick={()=>{}} ignore-prop />|>;
// let opt = <|<[|{| contextId: 7, defId: 0 |}MainButton|] goTo="goTo" />|>;
// let opt = <|</*FIND ALL REFS*/[|{| contextId: 8, defId: 0 |}MainButton|] wrong />|>;

// === Definitions ===
// === /tests/cases/fourslash/file.tsx ===
// declare module JSX {
//     interface Element { }
//     interface IntrinsicElements {
//     }
//     interface ElementAttributesProperty { props; }
// }
// interface ClickableProps {
//     children?: string;
//     className?: string;
// }
// interface ButtonProps extends ClickableProps {
//     onClick(event?: React.MouseEvent<HTMLButtonElement>): void;
// }
// interface LinkProps extends ClickableProps {
//     goTo: string;
// }
// <|declare function [|{| contextId: 0, defId: 0 |}MainButton|](buttonProps: ButtonProps): JSX.Element;|>
// declare function MainButton(linkProps: LinkProps): JSX.Element;
// declare function MainButton(props: ButtonProps | LinkProps): JSX.Element;
// let opt = <MainButton />;
// let opt = <MainButton children="chidlren" />;
// let opt = <MainButton onClick={()=>{}} />;
// let opt = <MainButton onClick={()=>{}} ignore-prop />;
// let opt = <MainButton goTo="goTo" />;
// let opt = </*FIND ALL REFS*/MainButton wrong />;

// === Definitions Details ===
[
 {
  "defId": 0,
  "containerKind": "",
  "containerName": "",
  "kind": "function",
  "name": "function MainButton(buttonProps: ButtonProps): JSX.Element (+2 overloads)",
  "displayParts": [
   {
    "text": "function",
    "kind": "keyword"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "MainButton",
    "kind": "functionName"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "buttonProps",
    "kind": "parameterName"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "ButtonProps",
    "kind": "interfaceName"
   },
   {
    "text": ")",
    "kind": "punctuation"
   },
   {
    "text": ":",
    "kind": "punctuation"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "JSX",
    "kind": "moduleName"
   },
   {
    "text": ".",
    "kind": "punctuation"
   },
   {
    "text": "Element",
    "kind": "text"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "(",
    "kind": "punctuation"
   },
   {
    "text": "+",
    "kind": "operator"
   },
   {
    "text": "2",
    "kind": "numericLiteral"
   },
   {
    "text": " ",
    "kind": "space"
   },
   {
    "text": "overloads",
    "kind": "text"
   },
   {
    "text": ")",
    "kind": "punctuation"
   }
  ]
 }
]