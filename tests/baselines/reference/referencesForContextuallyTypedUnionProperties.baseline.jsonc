// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     /*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0, isDefinition: true |}common|]: string;|>
// }
// 
// interface B {
//     b: number;
//     common: number;
// }
// 
// // Assignment
// var v1: A | B = { a: 0, <|[|{| contextId: 1, defId: 1, isWriteAccess: true |}common|]: ""|> };
// var v2: A | B = { b: 0, <|[|{| contextId: 2, defId: 1, isWriteAccess: true |}common|]: 3|> };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, <|[|{| contextId: 3, defId: 1, isWriteAccess: true |}common|]: 1|> });
// 
// // Type cast
// var c = <A | B> { <|[|{| contextId: 4, defId: 1, isWriteAccess: true |}common|]: 0|>, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, <|[|{| contextId: 5, defId: 1, isWriteAccess: true |}common|]: ""|> }, { b: 0, <|[|{| contextId: 6, defId: 1, isWriteAccess: true |}common|]: 0|> }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, <|[|{| contextId: 7, defId: 1, isWriteAccess: true |}common|]: 0|> } };
// 
// // Widened type
// var w: A|B = { a:0, <|[|{| contextId: 8, defId: 1, isWriteAccess: true |}common|]: undefined|> };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

// === Definitions ===
// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     /*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) A.common: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"A","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}<|[|{| contextId: 1, defId: 1, kind: "property", name: "(property) common: string | number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"},{"text":" ","kind":"space"},{"text":"|","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]|]: string;|>|>
// }
// 
// interface B {
//     b: number;
//     common: number;
// }
// 
// // Assignment
// var v1: A | B = { a: 0, common: "" };
// var v2: A | B = { b: 0, common: 3 };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, common: 1 });
// 
// // Type cast
// var c = <A | B> { common: 0, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, common: "" }, { b: 0, common: 0 }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, common: 0 } };
// 
// // Widened type
// var w: A|B = { a:0, common: undefined };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) A.common: string",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "A",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 33,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 33,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": true
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) common: string | number",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "|",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 142,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 142,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 180,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 180,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 267,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 267,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 313,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 313,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 380,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 380,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 402,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 402,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 482,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 482,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 534,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 534,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     common: string;
// }
// 
// interface B {
//     b: number;
//     /*FIND ALL REFS*/<|[|{| contextId: 0, defId: 0, isDefinition: true |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, <|[|{| contextId: 1, defId: 1, isWriteAccess: true |}common|]: ""|> };
// var v2: A | B = { b: 0, <|[|{| contextId: 2, defId: 1, isWriteAccess: true |}common|]: 3|> };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, <|[|{| contextId: 3, defId: 1, isWriteAccess: true |}common|]: 1|> });
// 
// // Type cast
// var c = <A | B> { <|[|{| contextId: 4, defId: 1, isWriteAccess: true |}common|]: 0|>, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, <|[|{| contextId: 5, defId: 1, isWriteAccess: true |}common|]: ""|> }, { b: 0, <|[|{| contextId: 6, defId: 1, isWriteAccess: true |}common|]: 0|> }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, <|[|{| contextId: 7, defId: 1, isWriteAccess: true |}common|]: 0|> } };
// 
// // Widened type
// var w: A|B = { a:0, <|[|{| contextId: 8, defId: 1, isWriteAccess: true |}common|]: undefined|> };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

// === Definitions ===
// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 1, kind: "property", name: "(property) common: string | number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"},{"text":" ","kind":"space"},{"text":"|","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]: string;|>
// }
// 
// interface B {
//     b: number;
//     /*FIND ALL REFS*/<|[|{| contextId: 1, defId: 0, kind: "property", name: "(property) B.common: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"B","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, common: "" };
// var v2: A | B = { b: 0, common: 3 };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, common: 1 });
// 
// // Type cast
// var c = <A | B> { common: 0, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, common: "" }, { b: 0, common: 0 }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, common: 0 } };
// 
// // Widened type
// var w: A|B = { a:0, common: undefined };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) B.common: number",
      "textSpan": {
        "start": 85,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "B",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 85,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 85,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 85,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": true
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) common: string | number",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "|",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 142,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 142,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 180,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 180,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 267,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 267,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 313,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 313,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 380,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 380,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 402,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 402,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 482,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 482,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 534,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 534,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0 |}common|]: string;|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 1, defId: 1 |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, /*FIND ALL REFS*/<|[|{| contextId: 2, defId: 2, isWriteAccess: true, isDefinition: true |}common|]: ""|> };
// var v2: A | B = { b: 0, <|[|{| contextId: 3, defId: 2, isWriteAccess: true |}common|]: 3|> };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, <|[|{| contextId: 4, defId: 2, isWriteAccess: true |}common|]: 1|> });
// 
// // Type cast
// var c = <A | B> { <|[|{| contextId: 5, defId: 2, isWriteAccess: true |}common|]: 0|>, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, <|[|{| contextId: 6, defId: 2, isWriteAccess: true |}common|]: ""|> }, { b: 0, <|[|{| contextId: 7, defId: 2, isWriteAccess: true |}common|]: 0|> }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, <|[|{| contextId: 8, defId: 2, isWriteAccess: true |}common|]: 0|> } };
// 
// // Widened type
// var w: A|B = { a:0, <|[|{| contextId: 9, defId: 2, isWriteAccess: true |}common|]: undefined|> };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

// === Definitions ===
// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) A.common: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"A","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}<|[|{| contextId: 1, defId: 2, kind: "property", name: "(property) common: string | number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"},{"text":" ","kind":"space"},{"text":"|","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]|]: string;|>|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 2, defId: 1, kind: "property", name: "(property) B.common: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"B","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, /*FIND ALL REFS*/common: "" };
// var v2: A | B = { b: 0, common: 3 };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, common: 1 });
// 
// // Type cast
// var c = <A | B> { common: 0, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, common: "" }, { b: 0, common: 0 }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, common: 0 } };
// 
// // Widened type
// var w: A|B = { a:0, common: undefined };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) A.common: string",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "A",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 33,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 33,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) B.common: number",
      "textSpan": {
        "start": 85,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "B",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 85,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 85,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 85,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) common: string | number",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "|",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 142,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 142,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 180,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 180,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 267,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 267,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 313,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 313,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 380,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 380,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 402,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 402,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 482,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 482,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 534,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 534,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0 |}common|]: string;|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 1, defId: 1 |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, <|[|{| contextId: 2, defId: 2, isWriteAccess: true |}common|]: ""|> };
// var v2: A | B = { b: 0, /*FIND ALL REFS*/<|[|{| contextId: 3, defId: 2, isWriteAccess: true, isDefinition: true |}common|]: 3|> };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, <|[|{| contextId: 4, defId: 2, isWriteAccess: true |}common|]: 1|> });
// 
// // Type cast
// var c = <A | B> { <|[|{| contextId: 5, defId: 2, isWriteAccess: true |}common|]: 0|>, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, <|[|{| contextId: 6, defId: 2, isWriteAccess: true |}common|]: ""|> }, { b: 0, <|[|{| contextId: 7, defId: 2, isWriteAccess: true |}common|]: 0|> }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, <|[|{| contextId: 8, defId: 2, isWriteAccess: true |}common|]: 0|> } };
// 
// // Widened type
// var w: A|B = { a:0, <|[|{| contextId: 9, defId: 2, isWriteAccess: true |}common|]: undefined|> };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

// === Definitions ===
// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) A.common: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"A","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}<|[|{| contextId: 1, defId: 2, kind: "property", name: "(property) common: string | number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"},{"text":" ","kind":"space"},{"text":"|","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]|]: string;|>|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 2, defId: 1, kind: "property", name: "(property) B.common: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"B","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, common: "" };
// var v2: A | B = { b: 0, /*FIND ALL REFS*/common: 3 };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, common: 1 });
// 
// // Type cast
// var c = <A | B> { common: 0, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, common: "" }, { b: 0, common: 0 }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, common: 0 } };
// 
// // Widened type
// var w: A|B = { a:0, common: undefined };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) A.common: string",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "A",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 33,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 33,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) B.common: number",
      "textSpan": {
        "start": 85,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "B",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 85,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 85,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 85,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) common: string | number",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "|",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 142,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 142,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 180,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 180,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 267,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 267,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 313,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 313,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 380,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 380,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 402,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 402,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 482,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 482,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 534,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 534,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0 |}common|]: string;|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 1, defId: 1 |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, <|[|{| contextId: 2, defId: 2, isWriteAccess: true |}common|]: ""|> };
// var v2: A | B = { b: 0, <|[|{| contextId: 3, defId: 2, isWriteAccess: true |}common|]: 3|> };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, /*FIND ALL REFS*/<|[|{| contextId: 4, defId: 2, isWriteAccess: true, isDefinition: true |}common|]: 1|> });
// 
// // Type cast
// var c = <A | B> { <|[|{| contextId: 5, defId: 2, isWriteAccess: true |}common|]: 0|>, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, <|[|{| contextId: 6, defId: 2, isWriteAccess: true |}common|]: ""|> }, { b: 0, <|[|{| contextId: 7, defId: 2, isWriteAccess: true |}common|]: 0|> }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, <|[|{| contextId: 8, defId: 2, isWriteAccess: true |}common|]: 0|> } };
// 
// // Widened type
// var w: A|B = { a:0, <|[|{| contextId: 9, defId: 2, isWriteAccess: true |}common|]: undefined|> };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

// === Definitions ===
// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) A.common: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"A","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}<|[|{| contextId: 1, defId: 2, kind: "property", name: "(property) common: string | number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"},{"text":" ","kind":"space"},{"text":"|","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]|]: string;|>|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 2, defId: 1, kind: "property", name: "(property) B.common: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"B","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, common: "" };
// var v2: A | B = { b: 0, common: 3 };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, /*FIND ALL REFS*/common: 1 });
// 
// // Type cast
// var c = <A | B> { common: 0, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, common: "" }, { b: 0, common: 0 }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, common: 0 } };
// 
// // Widened type
// var w: A|B = { a:0, common: undefined };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) A.common: string",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "A",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 33,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 33,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) B.common: number",
      "textSpan": {
        "start": 85,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "B",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 85,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 85,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 85,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) common: string | number",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "|",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 142,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 142,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 180,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 180,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 267,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 267,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 313,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 313,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 380,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 380,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 402,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 402,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 482,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 482,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 534,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 534,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0 |}common|]: string;|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 1, defId: 1 |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, <|[|{| contextId: 2, defId: 2, isWriteAccess: true |}common|]: ""|> };
// var v2: A | B = { b: 0, <|[|{| contextId: 3, defId: 2, isWriteAccess: true |}common|]: 3|> };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, <|[|{| contextId: 4, defId: 2, isWriteAccess: true |}common|]: 1|> });
// 
// // Type cast
// var c = <A | B> { /*FIND ALL REFS*/<|[|{| contextId: 5, defId: 2, isWriteAccess: true, isDefinition: true |}common|]: 0|>, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, <|[|{| contextId: 6, defId: 2, isWriteAccess: true |}common|]: ""|> }, { b: 0, <|[|{| contextId: 7, defId: 2, isWriteAccess: true |}common|]: 0|> }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, <|[|{| contextId: 8, defId: 2, isWriteAccess: true |}common|]: 0|> } };
// 
// // Widened type
// var w: A|B = { a:0, <|[|{| contextId: 9, defId: 2, isWriteAccess: true |}common|]: undefined|> };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

// === Definitions ===
// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) A.common: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"A","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}<|[|{| contextId: 1, defId: 2, kind: "property", name: "(property) common: string | number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"},{"text":" ","kind":"space"},{"text":"|","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]|]: string;|>|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 2, defId: 1, kind: "property", name: "(property) B.common: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"B","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, common: "" };
// var v2: A | B = { b: 0, common: 3 };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, common: 1 });
// 
// // Type cast
// var c = <A | B> { /*FIND ALL REFS*/common: 0, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, common: "" }, { b: 0, common: 0 }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, common: 0 } };
// 
// // Widened type
// var w: A|B = { a:0, common: undefined };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) A.common: string",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "A",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 33,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 33,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) B.common: number",
      "textSpan": {
        "start": 85,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "B",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 85,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 85,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 85,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) common: string | number",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "|",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 142,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 142,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 180,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 180,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 267,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 267,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 313,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 313,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 380,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 380,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 402,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 402,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 482,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 482,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 534,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 534,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0 |}common|]: string;|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 1, defId: 1 |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, <|[|{| contextId: 2, defId: 2, isWriteAccess: true |}common|]: ""|> };
// var v2: A | B = { b: 0, <|[|{| contextId: 3, defId: 2, isWriteAccess: true |}common|]: 3|> };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, <|[|{| contextId: 4, defId: 2, isWriteAccess: true |}common|]: 1|> });
// 
// // Type cast
// var c = <A | B> { <|[|{| contextId: 5, defId: 2, isWriteAccess: true |}common|]: 0|>, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, /*FIND ALL REFS*/<|[|{| contextId: 6, defId: 2, isWriteAccess: true, isDefinition: true |}common|]: ""|> }, { b: 0, <|[|{| contextId: 7, defId: 2, isWriteAccess: true |}common|]: 0|> }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, <|[|{| contextId: 8, defId: 2, isWriteAccess: true |}common|]: 0|> } };
// 
// // Widened type
// var w: A|B = { a:0, <|[|{| contextId: 9, defId: 2, isWriteAccess: true |}common|]: undefined|> };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

// === Definitions ===
// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) A.common: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"A","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}<|[|{| contextId: 1, defId: 2, kind: "property", name: "(property) common: string | number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"},{"text":" ","kind":"space"},{"text":"|","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]|]: string;|>|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 2, defId: 1, kind: "property", name: "(property) B.common: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"B","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, common: "" };
// var v2: A | B = { b: 0, common: 3 };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, common: 1 });
// 
// // Type cast
// var c = <A | B> { common: 0, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, /*FIND ALL REFS*/common: "" }, { b: 0, common: 0 }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, common: 0 } };
// 
// // Widened type
// var w: A|B = { a:0, common: undefined };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) A.common: string",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "A",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 33,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 33,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) B.common: number",
      "textSpan": {
        "start": 85,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "B",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 85,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 85,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 85,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) common: string | number",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "|",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 142,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 142,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 180,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 180,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 267,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 267,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 313,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 313,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 380,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 380,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 402,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 402,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 482,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 482,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 534,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 534,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0 |}common|]: string;|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 1, defId: 1 |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, <|[|{| contextId: 2, defId: 2, isWriteAccess: true |}common|]: ""|> };
// var v2: A | B = { b: 0, <|[|{| contextId: 3, defId: 2, isWriteAccess: true |}common|]: 3|> };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, <|[|{| contextId: 4, defId: 2, isWriteAccess: true |}common|]: 1|> });
// 
// // Type cast
// var c = <A | B> { <|[|{| contextId: 5, defId: 2, isWriteAccess: true |}common|]: 0|>, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, <|[|{| contextId: 6, defId: 2, isWriteAccess: true |}common|]: ""|> }, { b: 0, /*FIND ALL REFS*/<|[|{| contextId: 7, defId: 2, isWriteAccess: true, isDefinition: true |}common|]: 0|> }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, <|[|{| contextId: 8, defId: 2, isWriteAccess: true |}common|]: 0|> } };
// 
// // Widened type
// var w: A|B = { a:0, <|[|{| contextId: 9, defId: 2, isWriteAccess: true |}common|]: undefined|> };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

// === Definitions ===
// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) A.common: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"A","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}<|[|{| contextId: 1, defId: 2, kind: "property", name: "(property) common: string | number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"},{"text":" ","kind":"space"},{"text":"|","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]|]: string;|>|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 2, defId: 1, kind: "property", name: "(property) B.common: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"B","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, common: "" };
// var v2: A | B = { b: 0, common: 3 };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, common: 1 });
// 
// // Type cast
// var c = <A | B> { common: 0, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, common: "" }, { b: 0, /*FIND ALL REFS*/common: 0 }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, common: 0 } };
// 
// // Widened type
// var w: A|B = { a:0, common: undefined };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) A.common: string",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "A",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 33,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 33,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) B.common: number",
      "textSpan": {
        "start": 85,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "B",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 85,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 85,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 85,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) common: string | number",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "|",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 142,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 142,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 180,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 180,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 267,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 267,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 313,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 313,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 380,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 380,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 402,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 402,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 482,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 482,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 534,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 534,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0 |}common|]: string;|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 1, defId: 1 |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, <|[|{| contextId: 2, defId: 2, isWriteAccess: true |}common|]: ""|> };
// var v2: A | B = { b: 0, <|[|{| contextId: 3, defId: 2, isWriteAccess: true |}common|]: 3|> };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, <|[|{| contextId: 4, defId: 2, isWriteAccess: true |}common|]: 1|> });
// 
// // Type cast
// var c = <A | B> { <|[|{| contextId: 5, defId: 2, isWriteAccess: true |}common|]: 0|>, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, <|[|{| contextId: 6, defId: 2, isWriteAccess: true |}common|]: ""|> }, { b: 0, <|[|{| contextId: 7, defId: 2, isWriteAccess: true |}common|]: 0|> }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, /*FIND ALL REFS*/<|[|{| contextId: 8, defId: 2, isWriteAccess: true, isDefinition: true |}common|]: 0|> } };
// 
// // Widened type
// var w: A|B = { a:0, <|[|{| contextId: 9, defId: 2, isWriteAccess: true |}common|]: undefined|> };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

// === Definitions ===
// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) A.common: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"A","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}<|[|{| contextId: 1, defId: 2, kind: "property", name: "(property) common: string | number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"},{"text":" ","kind":"space"},{"text":"|","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]|]: string;|>|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 2, defId: 1, kind: "property", name: "(property) B.common: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"B","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, common: "" };
// var v2: A | B = { b: 0, common: 3 };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, common: 1 });
// 
// // Type cast
// var c = <A | B> { common: 0, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, common: "" }, { b: 0, common: 0 }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, /*FIND ALL REFS*/common: 0 } };
// 
// // Widened type
// var w: A|B = { a:0, common: undefined };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) A.common: string",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "A",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 33,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 33,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) B.common: number",
      "textSpan": {
        "start": 85,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "B",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 85,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 85,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 85,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) common: string | number",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "|",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 142,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 142,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 180,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 180,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 267,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 267,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 313,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 313,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 380,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 380,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 402,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 402,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 482,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 482,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": true
      },
      {
        "textSpan": {
          "start": 534,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 534,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": false
      }
    ]
  }
]

// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0 |}common|]: string;|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 1, defId: 1 |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, <|[|{| contextId: 2, defId: 2, isWriteAccess: true |}common|]: ""|> };
// var v2: A | B = { b: 0, <|[|{| contextId: 3, defId: 2, isWriteAccess: true |}common|]: 3|> };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, <|[|{| contextId: 4, defId: 2, isWriteAccess: true |}common|]: 1|> });
// 
// // Type cast
// var c = <A | B> { <|[|{| contextId: 5, defId: 2, isWriteAccess: true |}common|]: 0|>, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, <|[|{| contextId: 6, defId: 2, isWriteAccess: true |}common|]: ""|> }, { b: 0, <|[|{| contextId: 7, defId: 2, isWriteAccess: true |}common|]: 0|> }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, <|[|{| contextId: 8, defId: 2, isWriteAccess: true |}common|]: 0|> } };
// 
// // Widened type
// var w: A|B = { a:0, /*FIND ALL REFS*/<|[|{| contextId: 9, defId: 2, isWriteAccess: true, isDefinition: true |}common|]: undefined|> };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

// === Definitions ===
// === /tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts ===
// interface A {
//     a: number;
//     <|[|{| contextId: 0, defId: 0, kind: "property", name: "(property) A.common: string", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"A","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"}] |}<|[|{| contextId: 1, defId: 2, kind: "property", name: "(property) common: string | number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"string","kind":"keyword"},{"text":" ","kind":"space"},{"text":"|","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]|]: string;|>|>
// }
// 
// interface B {
//     b: number;
//     <|[|{| contextId: 2, defId: 1, kind: "property", name: "(property) B.common: number", displayParts: [{"text":"(","kind":"punctuation"},{"text":"property","kind":"text"},{"text":")","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"B","kind":"interfaceName"},{"text":".","kind":"punctuation"},{"text":"common","kind":"propertyName"},{"text":":","kind":"punctuation"},{"text":" ","kind":"space"},{"text":"number","kind":"keyword"}] |}common|]: number;|>
// }
// 
// // Assignment
// var v1: A | B = { a: 0, common: "" };
// var v2: A | B = { b: 0, common: 3 };
// 
// // Function call
// function consumer(f:  A | B) { }
// consumer({ a: 0, b: 0, common: 1 });
// 
// // Type cast
// var c = <A | B> { common: 0, b: 0 };
// 
// // Array literal
// var ar: Array<A|B> = [{ a: 0, common: "" }, { b: 0, common: 0 }];
// 
// // Nested object literal
// var ob: { aorb: A|B } = { aorb: { b: 0, common: 0 } };
// 
// // Widened type
// var w: A|B = { a:0, /*FIND ALL REFS*/common: undefined };
// 
// // Untped -- should not be included
// var u1 = { a: 0, b: 0, common: "" };
// var u2 = { b: 0, common: 0 };

[
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) A.common: string",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "A",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 33,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 33,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) B.common: number",
      "textSpan": {
        "start": 85,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "B",
          "kind": "interfaceName"
        },
        {
          "text": ".",
          "kind": "punctuation"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 85,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 85,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 85,
          "length": 15
        },
        "isWriteAccess": false,
        "isDefinition": false
      }
    ]
  },
  {
    "definition": {
      "containerKind": "",
      "containerName": "",
      "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
      "kind": "property",
      "name": "(property) common: string | number",
      "textSpan": {
        "start": 33,
        "length": 6
      },
      "displayParts": [
        {
          "text": "(",
          "kind": "punctuation"
        },
        {
          "text": "property",
          "kind": "text"
        },
        {
          "text": ")",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "common",
          "kind": "propertyName"
        },
        {
          "text": ":",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "string",
          "kind": "keyword"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "|",
          "kind": "punctuation"
        },
        {
          "text": " ",
          "kind": "space"
        },
        {
          "text": "number",
          "kind": "keyword"
        }
      ],
      "contextSpan": {
        "start": 33,
        "length": 15
      }
    },
    "references": [
      {
        "textSpan": {
          "start": 142,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 142,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 180,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 180,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 267,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 267,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 313,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 313,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 380,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 380,
          "length": 10
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 402,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 402,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 482,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 482,
          "length": 9
        },
        "isWriteAccess": true,
        "isDefinition": false
      },
      {
        "textSpan": {
          "start": 534,
          "length": 6
        },
        "fileName": "/tests/cases/fourslash/referencesForContextuallyTypedUnionProperties.ts",
        "contextSpan": {
          "start": 534,
          "length": 17
        },
        "isWriteAccess": true,
        "isDefinition": true
      }
    ]
  }
]