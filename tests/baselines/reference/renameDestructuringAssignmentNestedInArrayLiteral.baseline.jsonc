// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInArrayLiteral.ts ===
// interface I {
//     /*RENAME*/<|[|{| contextId: 0 |}property1RENAME|]: number;|>
//     property2: string;
// }
// var elems: I[], p1: number, property1: number;
// <|[{ [|{| contextId: 1 |}property1RENAME|]: p1 }] = elems;|>
// <|[{ [|{| contextId: 2 |}property1RENAME|]: property1/*END SUFFIX*/ }] = elems;|>



// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInArrayLiteral.ts ===
// interface I {
//     <|[|{| contextId: 0 |}property1RENAME|]: number;|>
//     property2: string;
// }
// var elems: I[], p1: number, property1: number;
// <|[{ /*RENAME*/[|{| contextId: 1 |}property1RENAME|]: p1 }] = elems;|>
// <|[{ [|{| contextId: 2 |}property1RENAME|]: property1/*END SUFFIX*/ }] = elems;|>



// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInArrayLiteral.ts ===
// interface I {
//     property1: number;
//     property2: string;
// }
// var elems: I[], p1: number, /*RENAME*/<|[|{| contextId: 0 |}property1RENAME|]: number|>;
// [{ property1: p1 }] = elems;
// <|[{ /*START PREFIX*/property1: [|{| contextId: 1 |}property1RENAME|] }] = elems;|>



// === /tests/cases/fourslash/renameDestructuringAssignmentNestedInArrayLiteral.ts ===
// interface I {
//     property1: number;
//     property2: string;
// }
// var elems: I[], p1: number, <|[|{| contextId: 0 |}property1RENAME|]: number|>;
// [{ property1: p1 }] = elems;
// <|[{ /*START PREFIX*/property1: /*RENAME*/[|{| contextId: 1 |}property1RENAME|] }] = elems;|>

